import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as e,b as s,d as n,a as p}from"./app-51564aae.js";const o={},l=s("h2",{id:"b-little-girl-and-game",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#b-little-girl-and-game","aria-hidden":"true"},"#"),n(" B. Little Girl and Game")],-1),i=s("p",null,"The Little Girl loves problems on games very much. Here's one of them.",-1),c=s("p",null,"Two players have got a string s, consisting of lowercase English letters. They play a game that is described by the following rules:",-1),r=s("p",null,`The players move in turns; In one move the player can remove an arbitrary letter from string s. If the player before his turn can reorder the letters in string s so as to get a palindrome, this player wins. A palindrome is a string that reads the same both ways (from left to right, and vice versa). For example, string "abba" is a palindrome and string "abc" isn't. Determine which player will win, provided that both sides play optimally well — the one who moves first or the one who moves second.`,-1),u=s("h2",{id:"input",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#input","aria-hidden":"true"},"#"),n(" Input")],-1),d=s("p",null,[n("The input contains a single line, containing string "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"s"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mtext",null," "),s("mo",null,"≤"),s("mtext",null," "),s("mi",{mathvariant:"normal"},"∣"),s("mi",null,"s"),s("mi",{mathvariant:"normal"},"∣"),s("mtext",null,"  "),s("mo",null,"≤"),s("mtext",null,"  "),s("mn",null,"1"),s("msup",null,[s("mn",null,"0"),s("mn",null,"3")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"s (1 ≤ |s|  ≤  10^3)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1 "),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"}," ∣"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord"},"∣  "),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"≤"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"  1"),s("span",{class:"mord"},[s("span",{class:"mord"},"0"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"3")])])])])])])]),s("span",{class:"mclose"},")")])])]),n(" . String s consists of lowercase English letters.")],-1),m=p(`<h2 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> Output</h2><p>In a single line print word &quot;First&quot; if the first player wins (provided that both players play optimally well). Otherwise, print word &quot;Second&quot;. Print the words without the quotes.</p><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个字符串，每回合可以进行一次操作：</p><ul><li>删掉任意一个字符</li><li>如果可以重组变成回文串，那么就赢了</li></ul><p>问第一个人赢还是第二个人</p><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h2><p>很显然，答案和奇数字符出现的次数和偶数出现的次数有关，对于初始状态来说，偶数字符出现的次数不会影响到最后的答案，如果字符次数为奇数的个数大于1：</p><ul><li>字符次数为奇数的个数为奇数时，那么是必胜的，因为可以先把字符出现次数为偶数的都去掉，也可以把字符次数为奇数的个数的字符都去掉到只剩下一个，这样整个字符串变成了全是不同字符的字符串，同时字符串长度为奇数，那么每次没人拿一个，最后肯定只剩下一个给第一个人，此时这个为回文串，同时还需要注意一开始字符次数全为偶数的情况，也是第一个人获胜</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ONLINE_JUDGE</span></span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;../test.in&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;../test.out&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    string s<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>
    map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> m<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>second <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> cnt<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;First&quot;</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;Second&quot;</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),k=[l,i,c,r,u,d,m];function h(v,g){return t(),e("div",null,k)}const f=a(o,[["render",h],["__file","Codeforces-Round-169-Div-2-B-Little-Girl-and-Game.html.vue"]]);export{f as default};
