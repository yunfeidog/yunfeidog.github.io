const t=JSON.parse(`{"key":"v-49c55ebc","path":"/java/2-Java%E9%AB%98%E7%BA%A7/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html","title":"JUC并发编程与源码分析","lang":"zh-CN","frontmatter":{"title":"JUC并发编程与源码分析","date":"2024-02-19T00:00:00.000Z","category":["Java","JUC"],"tag":["Java","JUC"],"description":"JUC并发编程与源码分析 线程基础知识复习 Java开启一个线程的源码： public synchronized void start() { /** * This method is not invoked for the main method thread or \\"system\\" * group threads created/set up by the VM. Any new functionality added * to this method in the future may have to also be added to the VM. * * A zero status value corresponds to state \\"NEW\\". */ if (threadStatus != 0) throw new IllegalThreadStateException(); /* Notify the group that this thread is about to be started * so that it can be added to the group's list of threads * and the group's unstarted count can be decremented. */ group.add(this); boolean started = false; try { start0(); started = true; } finally { try { if (!started) { group.threadStartFailed(this); } } catch (Throwable ignore) { /* do nothing. If start0 threw a Throwable then it will be passed up the call stack */ } } } private native void start0();","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/java/2-Java%E9%AB%98%E7%BA%A7/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"全民制作人ikun"}],["meta",{"property":"og:title","content":"JUC并发编程与源码分析"}],["meta",{"property":"og:description","content":"JUC并发编程与源码分析 线程基础知识复习 Java开启一个线程的源码： public synchronized void start() { /** * This method is not invoked for the main method thread or \\"system\\" * group threads created/set up by the VM. Any new functionality added * to this method in the future may have to also be added to the VM. * * A zero status value corresponds to state \\"NEW\\". */ if (threadStatus != 0) throw new IllegalThreadStateException(); /* Notify the group that this thread is about to be started * so that it can be added to the group's list of threads * and the group's unstarted count can be decremented. */ group.add(this); boolean started = false; try { start0(); started = true; } finally { try { if (!started) { group.threadStartFailed(this); } } catch (Throwable ignore) { /* do nothing. If start0 threw a Throwable then it will be passed up the call stack */ } } } private native void start0();"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-30T07:11:06.000Z"}],["meta",{"property":"article:author","content":"全民制作人ikun"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JUC"}],["meta",{"property":"article:published_time","content":"2024-02-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-30T07:11:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JUC并发编程与源码分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-30T07:11:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全民制作人ikun\\",\\"url\\":\\"https://github.com/yunfeidog\\"}]}"]]},"headers":[{"level":2,"title":"线程基础知识复习","slug":"线程基础知识复习","link":"#线程基础知识复习","children":[]},{"level":2,"title":"CompletableFuture","slug":"completablefuture","link":"#completablefuture","children":[{"level":3,"title":"FutureTask","slug":"futuretask","link":"#futuretask","children":[]},{"level":3,"title":"CompletableFuture","slug":"completablefuture-1","link":"#completablefuture-1","children":[]}]},{"level":2,"title":"多线程锁","slug":"多线程锁","link":"#多线程锁","children":[{"level":3,"title":"乐观锁和悲观锁","slug":"乐观锁和悲观锁","link":"#乐观锁和悲观锁","children":[]},{"level":3,"title":"synchronized三种应用方式","slug":"synchronized三种应用方式","link":"#synchronized三种应用方式","children":[]},{"level":3,"title":"公平锁和非公平锁","slug":"公平锁和非公平锁","link":"#公平锁和非公平锁","children":[]},{"level":3,"title":"可重入锁(递归锁)","slug":"可重入锁-递归锁","link":"#可重入锁-递归锁","children":[]},{"level":3,"title":"死锁","slug":"死锁","link":"#死锁","children":[]}]},{"level":2,"title":"LockSupport与线程中断","slug":"locksupport与线程中断","link":"#locksupport与线程中断","children":[{"level":3,"title":"线程中断","slug":"线程中断","link":"#线程中断","children":[]},{"level":3,"title":"LockSupport","slug":"locksupport","link":"#locksupport","children":[]}]},{"level":2,"title":"JAVA内存模型之JMM","slug":"java内存模型之jmm","link":"#java内存模型之jmm","children":[{"level":3,"title":"JMM规范三大特性","slug":"jmm规范三大特性","link":"#jmm规范三大特性","children":[]},{"level":3,"title":"happens-before","slug":"happens-before","link":"#happens-before","children":[]}]},{"level":2,"title":"volatile与JMM","slug":"volatile与jmm","link":"#volatile与jmm","children":[{"level":3,"title":"内存屏障","slug":"内存屏障","link":"#内存屏障","children":[]}]}],"git":{"createdTime":1717053066000,"updatedTime":1717053066000,"contributors":[{"name":"yunfeidog","email":"1844025705@qq.com","commits":1}]},"readingTime":{"minutes":29.11,"words":8734},"filePathRelative":"java/2-Java高级/JUC并发编程与源码分析.md","localizedDate":"2024年2月19日","excerpt":"<h1> JUC并发编程与源码分析</h1>\\n<h2> 线程基础知识复习</h2>\\n<p>Java开启一个线程的源码：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">synchronized</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>  \\n    <span class=\\"token doc-comment comment\\">/**  \\n     * This method is not invoked for the main method thread or \\"system\\"     * group threads created/set up by the VM. Any new functionality added     * to this method in the future may have to also be added to the VM.     *     * A zero status value corresponds to state \\"NEW\\".     */</span>    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>threadStatus <span class=\\"token operator\\">!=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>  \\n        <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">IllegalThreadStateException</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  \\n  \\n    <span class=\\"token comment\\">/* Notify the group that this thread is about to be started  \\n     * so that it can be added to the group's list of threads     * and the group's unstarted count can be decremented. */</span>    group<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  \\n  \\n    <span class=\\"token keyword\\">boolean</span> started <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>  \\n    <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>  \\n        <span class=\\"token function\\">start0</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  \\n        started <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>  \\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">finally</span> <span class=\\"token punctuation\\">{</span>  \\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>  \\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>started<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>  \\n                group<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">threadStartFailed</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  \\n            <span class=\\"token punctuation\\">}</span>  \\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Throwable</span> ignore<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>  \\n            <span class=\\"token comment\\">/* do nothing. If start0 threw a Throwable then  \\n              it will be passed up the call stack */</span>        <span class=\\"token punctuation\\">}</span>  \\n    <span class=\\"token punctuation\\">}</span>  \\n<span class=\\"token punctuation\\">}</span>  \\n  \\n<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">native</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">start0</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"全民制作人cxk","license":"CC-BY-NC-SA-4.0"},"autoDesc":true}`);export{t as data};
