import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c,b as n,d as s,e,a as t}from"./app-51564aae.js";const l={},r=t(`<h1 id="通用方法" tabindex="-1"><a class="header-anchor" href="#通用方法" aria-hidden="true">#</a> 通用方法</h1><p>我们可以在编辑器中创建三个文件，一个是<code>main.cpp</code>,一个是<code>test.in</code>,一个是<code>test.out</code>分别用来写代码，输入输入数据，显示输出数据</p><p>这种方法的好处是不需要插件，在任何编辑器中都可以实现，例如Devc++,sublime,vscode,clion...</p><blockquote><p>可以在比赛的时候使用，例如篮球杯，天梯赛。。。</p></blockquote><p>以Clion为例：</p><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202308101224645.png" alt="image-20230810122412590" tabindex="0" loading="lazy"><figcaption>image-20230810122412590</figcaption></figure><p>文件结构长这样，然后使用freopen来读取文件和写入文件，加上ifndef</p><blockquote><p>ifndef 的好处就是，很多OJ有ONLINE_JUDGE ，因此你本地写了代码可以直接交，不会报错，也不用删除这一段代码</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ONLINE_JUDGE</span></span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;../test.in&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;../test.out&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>个人常用的模版文件如下(打codeforces比较快)：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">yes</span> <span class="token expression">cout <span class="token operator">&lt;&lt;</span> </span><span class="token string">&quot;YES&quot;</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">no</span> <span class="token expression">cout <span class="token operator">&lt;&lt;</span> </span><span class="token string">&quot;NO&quot;</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOS</span> <span class="token expression">cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">cxk</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cxk<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> </span><span class="token string">&quot;#debug:(&quot;</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> </span><span class="token string">&quot;)=&quot;</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    IOS
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ONLINE_JUDGE</span></span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;../test.in&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;../test.out&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">int</span> _ <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> _<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>_<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在solve函数中写完代码可以直接交OJ，例如codeforces，Atcoder，落谷，acwing 这些都可以通过</p></blockquote><h1 id="编辑器插件" tabindex="-1"><a class="header-anchor" href="#编辑器插件" aria-hidden="true">#</a> 编辑器插件</h1><p>下面介绍的方法都和一个CPH的东西有关，可以现在浏览器中安装插件(可能需要代理)：</p>`,13),u={href:"https://chrome.google.com/webstore/detail/competitive-companion/cjnmckjndlpiamhfimnnjmnckgghkjbl",target:"_blank",rel:"noopener noreferrer"},d=n("figure",null,[n("img",{src:"https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202308101232448.png",alt:"image-20230810123235420",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20230810123235420")],-1),k={href:"https://github.com/jmerle/competitive-companion",target:"_blank",rel:"noopener noreferrer"},g=n("figure",null,[n("img",{src:"https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202308101235813.png",alt:"image-20230810123539787",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20230810123539787")],-1),m=n("p",null,"安装完这里会显示一个加号，点击这个可以把本次比赛页面的所有题目弄到编辑器中，之后会遇到。",-1),v=n("h2",{id:"clion插件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#clion插件","aria-hidden":"true"},"#"),s(" Clion插件")],-1),f=n("p",null,[s("在Clion中，推荐使用插件"),n("strong",null,"AutoCp"),s(",该插件需要保持Clion为最新版本")],-1),h={href:"https://pushpavel.github.io/AutoCp/guide/getting-started.html#prerequisites",target:"_blank",rel:"noopener noreferrer"},b=t('<figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202308101228923.png" alt="image-20230810122803895" tabindex="0" loading="lazy"><figcaption>image-20230810122803895</figcaption></figure><p>安装完后，右侧会显示这个东西，找不到的话，可以在上面的View里面找一下：</p><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202308101244009.png" alt="image-20230810124421972" tabindex="0" loading="lazy"><figcaption>image-20230810124421972</figcaption></figure><p>然后随便找一个比赛，点CPH上面的<strong>加号</strong>:</p><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202308101245402.png" alt="image-20230810124547364" tabindex="0" loading="lazy"><figcaption>image-20230810124547364</figcaption></figure><p>然后回到编辑器中(由于这个比赛A题搞不下来，所以我换了一个Div2):</p><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202308101248951.png" alt="image-20230810124812902" tabindex="0" loading="lazy"><figcaption>image-20230810124812902</figcaption></figure><p>然后你就会得到这样的画面：</p><p>左边的几个题目全都帮你拉下来了，右边的样例输入输出也拉进来了，</p><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202308101248914.png" alt="image-20230810124857874" tabindex="0" loading="lazy"><figcaption>image-20230810124857874</figcaption></figure><p>写代码测试：</p><p>下面是通过的样子：</p><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202308101254039.png" alt="image-20230810125431000" tabindex="0" loading="lazy"><figcaption>image-20230810125431000</figcaption></figure><p>下面是不通过的样子,可以点进去看哪里不一样</p><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202308101252009.png" alt="image-20230810125216982" tabindex="0" loading="lazy"><figcaption>image-20230810125216982</figcaption></figure><p>如果你有自己的初始代码模版，也可以在这里添加：</p><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202308101256416.png" alt="image-20230810125651374" tabindex="0" loading="lazy"><figcaption>image-20230810125651374</figcaption></figure><h2 id="vscode" tabindex="-1"><a class="header-anchor" href="#vscode" aria-hidden="true">#</a> Vscode</h2><p>搜索安装如下插件：</p><p>浏览器安装的插件在Clion里面讲过了，步骤也是一样的，</p><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202308101338370.png" alt="image-20230810133823322" tabindex="0" loading="lazy"><figcaption>image-20230810133823322</figcaption></figure><p>然后网页上面点那个加号，回到vscode就会显示让你创建文件，我把python，java之类的都删了，因为我只需要用 c++</p><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202308101347210.png" alt="image-20230810134712153" tabindex="0" loading="lazy"><figcaption>image-20230810134712153</figcaption></figure><p>然后界面就出来了，右边的submit是用来提交平台的，不过好像只有火狐浏览器有这个插件</p><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202308101348827.png" alt="image-20230810134812771" tabindex="0" loading="lazy"><figcaption>image-20230810134812771</figcaption></figure><h2 id="sublime-text" tabindex="-1"><a class="header-anchor" href="#sublime-text" aria-hidden="true">#</a> Sublime Text</h2>',26),_={href:"https://juejin.cn/post/7177570367844646971%E5%90%A7",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"用法和上面一样",-1);function x(w,q){const a=o("ExternalLinkIcon");return i(),c("div",null,[r,n("p",null,[s("链接："),n("a",u,[s("https://chrome.google.com/webstore/detail/competitive-companion/cjnmckjndlpiamhfimnnjmnckgghkjbl"),e(a)])]),d,n("p",null,[s("没代理的话就去GitHub碰运气进去吧"),n("a",k,[s("https://github.com/jmerle/competitive-companion"),e(a)])]),g,m,v,f,n("p",null,[s("链接："),n("a",h,[s("https://pushpavel.github.io/AutoCp/guide/getting-started.html#prerequisites"),e(a)])]),b,n("p",null,[s("参考"),n("a",_,[s("https://juejin.cn/post/7177570367844646971吧"),e(a)])]),y])}const z=p(l,[["render",x],["__file","ACM算法竞赛中在编辑器中使用输入输出样例-CPH.html.vue"]]);export{z as default};
