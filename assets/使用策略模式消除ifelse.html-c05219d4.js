const e=JSON.parse('{"key":"v-049cf955","path":"/java/8-%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/%E4%BD%BF%E7%94%A8%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E6%B6%88%E9%99%A4ifelse.html","title":"使用策略模式消除ifelse","lang":"zh-CN","frontmatter":{"title":"使用策略模式消除ifelse","date":"2024-05-18T00:00:00.000Z","category":["Java","设计模式"],"tag":["Java","设计模式","策略模式"],"description":"使用策略模式消除ifelse 有这样的场景，根据不同的套餐，有不同的计算方式，全部在一个函数里面，使用if+else不停的判断，导致一个方法堆了成百上千行，而且不同的service里面都有这个关于不同套餐的计算方式。为了解决这个问题，学习使用策略模式消除，使得代码遵循开闭原则，新增新的套餐会变得容易 策略模式 代码 现在有一个coding函数，我们想要根据传入的codeType来进行判断使用那个编辑器coding，如果这样ifelse写的话，每次新加一个编辑器，这边都要进行修改，不符合软件设计的开闭原则。","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/java/8-%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/%E4%BD%BF%E7%94%A8%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E6%B6%88%E9%99%A4ifelse.html"}],["meta",{"property":"og:site_name","content":"全民制作人ikun"}],["meta",{"property":"og:title","content":"使用策略模式消除ifelse"}],["meta",{"property":"og:description","content":"使用策略模式消除ifelse 有这样的场景，根据不同的套餐，有不同的计算方式，全部在一个函数里面，使用if+else不停的判断，导致一个方法堆了成百上千行，而且不同的service里面都有这个关于不同套餐的计算方式。为了解决这个问题，学习使用策略模式消除，使得代码遵循开闭原则，新增新的套餐会变得容易 策略模式 代码 现在有一个coding函数，我们想要根据传入的codeType来进行判断使用那个编辑器coding，如果这样ifelse写的话，每次新加一个编辑器，这边都要进行修改，不符合软件设计的开闭原则。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-30T07:11:06.000Z"}],["meta",{"property":"article:author","content":"全民制作人ikun"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"策略模式"}],["meta",{"property":"article:published_time","content":"2024-05-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-30T07:11:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用策略模式消除ifelse\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-30T07:11:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全民制作人ikun\\",\\"url\\":\\"https://github.com/yunfeidog\\"}]}"]]},"headers":[{"level":2,"title":"策略模式","slug":"策略模式","link":"#策略模式","children":[]},{"level":2,"title":"策略模式+工厂模式+模版方法","slug":"策略模式-工厂模式-模版方法","link":"#策略模式-工厂模式-模版方法","children":[]},{"level":2,"title":"策略枚举","slug":"策略枚举","link":"#策略枚举","children":[]}],"git":{"createdTime":1717053066000,"updatedTime":1717053066000,"contributors":[{"name":"yunfeidog","email":"1844025705@qq.com","commits":1}]},"readingTime":{"minutes":1.91,"words":573},"filePathRelative":"java/8-代码优化/使用策略模式消除ifelse.md","localizedDate":"2024年5月18日","excerpt":"<h1> 使用策略模式消除ifelse</h1>\\n<blockquote>\\n<p>有这样的场景，根据不同的套餐，有不同的计算方式，全部在一个函数里面，使用if+else不停的判断，导致一个方法堆了成百上千行，而且不同的service里面都有这个关于不同套餐的计算方式。为了解决这个问题，学习使用策略模式消除，使得代码遵循开闭原则，新增新的套餐会变得容易</p>\\n</blockquote>\\n<h2> 策略模式</h2>\\n<p>代码</p>\\n<p>现在有一个coding函数，我们想要根据传入的codeType来进行判断使用那个编辑器coding，如果这样ifelse写的话，每次新加一个编辑器，这边都要进行修改，不符合软件设计的开闭原则。</p>","copyright":{"author":"全民制作人cxk","license":"CC-BY-NC-SA-4.0"},"autoDesc":true}');export{e as data};
