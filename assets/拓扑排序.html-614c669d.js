const e=JSON.parse('{"key":"v-011400d6","path":"/algorithm/6-%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F.html","title":"拓扑排序","lang":"zh-CN","frontmatter":{"title":"拓扑排序","date":"2023-07-07T18:55:02.000Z","category":["Algorithm","图论"],"tag":["Algorithm","图论","拓扑排序"],"description":"拓扑排序 给定一个有向无环图(DAG)，排出所有顶点的一个序列A满足：对于图中每条有向边(x,y),x在A中都出现在y之前，则A是该图中的顶点的一个拓扑序 拓扑排序可以判断 有向图中是否有环 ，可以生成拓扑序列 Kahn（卡恩）算法 e[x]存点x的邻点，res存拓扑序列，d[x]存x的入度 算法流程：核心用队列维护一个入度为0的节点的集合。 初始化，队列q压入所有入度为0的点； 每次从q中取出一个点x放入数组res; 然后将×的所有出边删除。若将边(x,y)删除后，y的入度变为0，则将y压入q中 不断重复2,3过程，直到队列q为空。 res中的元素个数等于n,则有拓扑序；否则，有环。","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/algorithm/6-%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F.html"}],["meta",{"property":"og:site_name","content":"全民制作人ikun"}],["meta",{"property":"og:title","content":"拓扑排序"}],["meta",{"property":"og:description","content":"拓扑排序 给定一个有向无环图(DAG)，排出所有顶点的一个序列A满足：对于图中每条有向边(x,y),x在A中都出现在y之前，则A是该图中的顶点的一个拓扑序 拓扑排序可以判断 有向图中是否有环 ，可以生成拓扑序列 Kahn（卡恩）算法 e[x]存点x的邻点，res存拓扑序列，d[x]存x的入度 算法流程：核心用队列维护一个入度为0的节点的集合。 初始化，队列q压入所有入度为0的点； 每次从q中取出一个点x放入数组res; 然后将×的所有出边删除。若将边(x,y)删除后，y的入度变为0，则将y压入q中 不断重复2,3过程，直到队列q为空。 res中的元素个数等于n,则有拓扑序；否则，有环。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-28T07:54:15.000Z"}],["meta",{"property":"article:author","content":"全民制作人ikun"}],["meta",{"property":"article:tag","content":"Algorithm"}],["meta",{"property":"article:tag","content":"图论"}],["meta",{"property":"article:tag","content":"拓扑排序"}],["meta",{"property":"article:published_time","content":"2023-07-07T18:55:02.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-28T07:54:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"拓扑排序\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-07T18:55:02.000Z\\",\\"dateModified\\":\\"2024-04-28T07:54:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全民制作人ikun\\",\\"url\\":\\"https://github.com/yunfeidog\\"}]}"]]},"headers":[{"level":2,"title":"Kahn（卡恩）算法","slug":"kahn-卡恩-算法","link":"#kahn-卡恩-算法","children":[{"level":3,"title":"题目-有向图的拓扑序列","slug":"题目-有向图的拓扑序列","link":"#题目-有向图的拓扑序列","children":[]}]},{"level":2,"title":"DFS算法","slug":"dfs算法","link":"#dfs算法","children":[{"level":3,"title":"代码","slug":"代码-1","link":"#代码-1","children":[]}]}],"git":{"createdTime":1698489661000,"updatedTime":1714290855000,"contributors":[{"name":"yunfeidog","email":"1844025705@qq.com","commits":2}]},"readingTime":{"minutes":3.22,"words":965},"filePathRelative":"algorithm/6-图论/拓扑排序.md","localizedDate":"2023年7月7日","excerpt":"<h1> 拓扑排序</h1>\\n<blockquote>\\n<p>给定一个有向无环图(DAG)，排出所有顶点的一个序列A满足：对于图中每条有向边(x,y),x在A中都出现在y之前，则A是该图中的顶点的一个拓扑序</p>\\n<p>拓扑排序可以判断 有向图中是否有环 ，可以生成拓扑序列</p>\\n</blockquote>\\n<h2> Kahn（卡恩）算法</h2>\\n<ul>\\n<li>e[x]存点x的邻点，res存拓扑序列，d[x]存x的入度</li>\\n</ul>\\n<p>算法流程：核心用队列维护一个入度为0的节点的集合。</p>\\n<ol>\\n<li>初始化，队列q压入所有入度为0的点；</li>\\n<li>每次从q中取出一个点x放入数组res;</li>\\n<li>然后将×的所有出边删除。若将边(x,y)删除后，y的入度变为0，则将y压入q中</li>\\n<li>不断重复2,3过程，直到队列q为空。</li>\\n<li>res中的元素个数等于n,则有拓扑序；否则，有环。</li>\\n</ol>","copyright":{"author":"全民制作人cxk","license":"CC-BY-NC-SA-4.0"},"autoDesc":true}');export{e as data};
