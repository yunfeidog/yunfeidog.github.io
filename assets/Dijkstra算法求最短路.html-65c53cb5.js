const t=JSON.parse('{"key":"v-358f38da","path":"/algorithm/6-%E5%9B%BE%E8%AE%BA/Dijkstra%E7%AE%97%E6%B3%95%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF.html","title":"Dijkstra算法求最短路","lang":"zh-CN","frontmatter":{"title":"Dijkstra算法求最短路","date":"2023-06-11T12:31:58.000Z","category":["Algorithm","图论"],"tag":["Algorithm","图论","Dijkstra"],"description":"Dijkstra算法是单源最短路算法，是用来求一个点到其他所有点点最短距离，使用小根堆优化后时间复杂度大概为OmlognOmlognOmlogn 注意：不可以解决存在负权边的问题","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/algorithm/6-%E5%9B%BE%E8%AE%BA/Dijkstra%E7%AE%97%E6%B3%95%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF.html"}],["meta",{"property":"og:site_name","content":"全民制作人ikun"}],["meta",{"property":"og:title","content":"Dijkstra算法求最短路"}],["meta",{"property":"og:description","content":"Dijkstra算法是单源最短路算法，是用来求一个点到其他所有点点最短距离，使用小根堆优化后时间复杂度大概为OmlognOmlognOmlogn 注意：不可以解决存在负权边的问题"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-28T07:54:15.000Z"}],["meta",{"property":"article:author","content":"全民制作人ikun"}],["meta",{"property":"article:tag","content":"Algorithm"}],["meta",{"property":"article:tag","content":"图论"}],["meta",{"property":"article:tag","content":"Dijkstra"}],["meta",{"property":"article:published_time","content":"2023-06-11T12:31:58.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-28T07:54:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dijkstra算法求最短路\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-11T12:31:58.000Z\\",\\"dateModified\\":\\"2024-04-28T07:54:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全民制作人ikun\\",\\"url\\":\\"https://github.com/yunfeidog\\"}]}"]]},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"输入格式","slug":"输入格式","link":"#输入格式","children":[]},{"level":2,"title":"输出格式","slug":"输出格式","link":"#输出格式","children":[]},{"level":2,"title":"样例 #1","slug":"样例-1","link":"#样例-1","children":[{"level":3,"title":"样例输入 #1","slug":"样例输入-1","link":"#样例输入-1","children":[]},{"level":3,"title":"样例输出 #1","slug":"样例输出-1","link":"#样例输出-1","children":[]}]},{"level":2,"title":"提示","slug":"提示","link":"#提示","children":[]},{"level":2,"title":"思路-朴素","slug":"思路-朴素","link":"#思路-朴素","children":[{"level":3,"title":"代码-","slug":"代码","link":"#代码","children":[]}]},{"level":2,"title":"思路-堆优化","slug":"思路-堆优化","link":"#思路-堆优化","children":[{"level":3,"title":"代码-","slug":"代码-1","link":"#代码-1","children":[]}]},{"level":2,"title":"题目","slug":"题目","link":"#题目","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"代码","slug":"代码-2","link":"#代码-2","children":[]}],"git":{"createdTime":1698489661000,"updatedTime":1714290855000,"contributors":[{"name":"yunfeidog","email":"1844025705@qq.com","commits":2}]},"readingTime":{"minutes":3.97,"words":1192},"filePathRelative":"algorithm/6-图论/Dijkstra算法求最短路.md","localizedDate":"2023年6月11日","excerpt":"<blockquote>\\n<p>Dijkstra算法是单源最短路算法，是用来求一个点到其他所有点点最短距离，使用小根堆优化后时间复杂度大概为<span class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>O</mi><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding=\\"application/x-tex\\">Omlogn</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.8889em;vertical-align:-0.1944em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.02778em;\\">O</span><span class=\\"mord mathnormal\\">m</span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.01968em;\\">l</span><span class=\\"mord mathnormal\\">o</span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.03588em;\\">g</span><span class=\\"mord mathnormal\\">n</span></span></span></span></p>\\n<p>注意：不可以解决存在负权边的问题</p>\\n</blockquote>","copyright":{"author":"全民制作人cxk","license":"CC-BY-NC-SA-4.0"},"autoDesc":true}');export{t as data};
