import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-51564aae.js";const t={},p=e(`<h1 id="b-random-teams" tabindex="-1"><a class="header-anchor" href="#b-random-teams" aria-hidden="true">#</a> B Random Teams</h1><h2 id="problem" tabindex="-1"><a class="header-anchor" href="#problem" aria-hidden="true">#</a> problem</h2><p><em>n</em> participants of the competition were split into <em>m</em> teams in some manner so that each team has at least one participant. After the competition each pair of participants from the same team became friends.</p><p>Your task is to write a program that will find the minimum and the maximum number of pairs of friends that could have formed by the end of the competition.</p><h2 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> Input</h2><p>The only line of input contains two integers <em>n</em> and <em>m</em>, separated by a single space (1 ≤ <em>m</em> ≤ <em>n</em> ≤ 10<sup class="upper-index">9</sup>) — the number of participants and the number of teams respectively.</p><h2 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> Output</h2><p>The only line of the output should contain two integers <em>k</em><sub class="lower-index"><i>min</i></sub> and <em>k</em><sub class="lower-index"><i>max</i></sub> — the minimum possible number of pairs of friends and the maximum possible number of pairs of friends respectively.</p><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个n，m， 将n分成m组，组内的两个人会成为好朋友，求会得到的好朋友个数的最大值和最小值</p><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h2><p>显然，将一个人放到人多的组里对答案的贡献会比将这个人放到人数少的里面要好，比如现在有两组，一组里面10个人，另一组一个人，显然放到10个人的这组里对答案的贡献会+10。因此:</p><ul><li>最优的答案是<code>m-1</code> 组里面只放一个人，1组里面放<code>n-m+1</code> 个人 ，此时的答案为：<code>(n - (m - 1)) * (n - (m - 1) - 1) / 2</code></li><li>最差的答案为先将每组平均分配，多出来的人，再去平均分配到每组中去。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>


<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ONLINE_JUDGE</span></span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;../test.in&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;../test.out&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>
    <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> t <span class="token operator">=</span> n <span class="token operator">/</span> m<span class="token punctuation">;</span>
    <span class="token keyword">int</span> yu <span class="token operator">=</span> n <span class="token operator">%</span> m<span class="token punctuation">;</span>
    <span class="token keyword">int</span> minn <span class="token operator">=</span> t <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> yu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    minn <span class="token operator">+=</span> <span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> yu<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> minn <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> maxn <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),o=[p];function c(i,r){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","Codeforces-Round-273-Div-2-B-Random-Teams.html.vue"]]);export{d as default};
