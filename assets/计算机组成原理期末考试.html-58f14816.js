import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as e,b as a,d as s,a as l}from"./app-51564aae.js";const n={},p=a("h1",{id:"数的表示",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#数的表示","aria-hidden":"true"},"#"),s(" 数的表示")],-1),r=a("h2",{id:"浮点数",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#浮点数","aria-hidden":"true"},"#"),s(" 浮点数")],-1),m=a("p",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"N"),a("mo",null,"="),a("mi",null,"M"),a("mo",null,"∗"),a("msup",null,[a("mi",null,"R"),a("mi",null,"e")])]),a("annotation",{encoding:"application/x-tex"},"N=M*R^e")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"∗"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.6644em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mathnormal mtight"},"e")])])])])])])])])])]),s("：其中M为尾数，R为基数(一般为2)，e为阶码，根科学计数法表示差不多")],-1),o=l('<blockquote><p>尾数M决定精度，越长精度越高</p><p>阶码e决定范围，越大范围越大</p></blockquote><p>规格化：</p><blockquote><p>正数写成0.1XXXX的形式</p><p>负数为-0.1XXX</p></blockquote><h1 id="输入输出系统" tabindex="-1"><a class="header-anchor" href="#输入输出系统" aria-hidden="true">#</a> 输入输出系统</h1><h2 id="基本的输入输出方式" tabindex="-1"><a class="header-anchor" href="#基本的输入输出方式" aria-hidden="true">#</a> 基本的输入输出方式</h2><h3 id="外围设备的寻址" tabindex="-1"><a class="header-anchor" href="#外围设备的寻址" aria-hidden="true">#</a> 外围设备的寻址</h3><ol><li>统一编址：将输入输出设备中控制寄存器、数据寄存器、状态寄存器等与内存单元一样看待，将它们和内存单元联合在一起编排地址，用访问内存的指令来访问输入输出设备接口的某个寄存器，从而实现数据的输入输出。</li><li>单独编址：将输入输出设备中控制寄存器、数据寄存器、状态寄存器单独编排地址，用专门的控制信号进行输入输出操作。</li><li>CPU与外围设备进行通信有三种类型： <ol><li>CPU向外围设备发出操作控制命令。</li><li>外围设备向CPU提供状态信息。</li><li>数据在CPU与外围设备之间的传递。</li></ol></li></ol><h3 id="外围设备的定时" tabindex="-1"><a class="header-anchor" href="#外围设备的定时" aria-hidden="true">#</a> 外围设备的定时</h3><p>外围设备的定时方式有**<u>异步传输方式</u><strong>和</strong><u>同步定时方式</u>**两种。</p><p>实现输入输出数据传输的方式主要有：</p><ul><li>程序控制方式 <ul><li>程序查询方式</li><li>中断方式</li></ul></li><li>直接存储访问（DMA）方式、</li><li>通道方式</li><li>I/O处理机</li></ul><h2 id="中断" tabindex="-1"><a class="header-anchor" href="#中断" aria-hidden="true">#</a> 中断</h2><h3 id="中断的基本概念" tabindex="-1"><a class="header-anchor" href="#中断的基本概念" aria-hidden="true">#</a> 中断的基本概念</h3><p>1．中断：是指CPU在接到随机产生的中断请求信号后，暂停原程序，转去执行相应的中断处理程序，以处理该随机事件，处理完毕后返回并继续执行原程序。</p><p>2．中断方式的特点：中断方式的输入输出操作可以减少CPU等待外围设备的时间，提高CPU的工作效率。</p><p>3．中断方式的应用范围：中断方式主要应用于处理复杂随机事件、控制中低速1/O。</p><p>4．简单的中断方式下，CPU响应中断的步骤：</p><p>（1）关中断</p><p>（2）保护现场</p><p>（3）识别发出中断的外围设备，判别中断信号，确定中断来源，形成中断服务程序入口地址。</p><p>（4）执行中断服务程序</p><p>（5）恢复现场信息</p><p>（6）开中断</p><p>5．现场保护：在CPU开始执行中断服务程序之前，将PC寄存器的值及任何可能影响返回后连续执行的信息（如状态寄存器及有关的寄存器的值）都需要进行保存，这种保存现场有关信息的操作称为现场保护。</p><p>6．中断向量：是指当外设在提出中断请求的同时，通过硬件向主机提供中断服务程序的入口地址，此地址称为中断向量。</p><h3 id="中断裁决机制" tabindex="-1"><a class="header-anchor" href="#中断裁决机制" aria-hidden="true">#</a> 中断裁决机制</h3><p>实现中断裁决的方式有：</p><p>1．轮询方式：是一种软件裁决方式，CPU依次查询各外围设备的状态寄存器，以确定中断源，遇到发出中断的外围设备就响应其中断请求。</p><p>2．菊花链方式：各外围设备合用一条中断请求信号线送，中断许可信号线串接在各设备间。</p><p>3．独立请求：每一个外围设备都有一个独立的中断请求信号线送CPU，CPU也给各外围设备分别发送一个中断许可信号。</p><p>4．分组的菊花链方式：每一组外围设备采用菊花链连接，组间是独立请求的。</p><h3 id="多重中断与中断屏蔽" tabindex="-1"><a class="header-anchor" href="#多重中断与中断屏蔽" aria-hidden="true">#</a> 多重中断与中断屏蔽</h3><p>1．多级中断：CPU在执行中断服务程序的过程中可以响应级别更高的中断请求。</p><p>2．中断嵌套：在多重中断系统中，CPU处理一个中断的过程中可以去响应新的中断请求。这种重叠处理中断的现象称为中断嵌套。在中断嵌套过程中，每次中断处理完成时再返回上一次被中断的服务程序。</p><p>3．多重中断系统中CPU响应处理一次中断的步骤。</p><p>（1）关中断；</p><p>（2）保存现场信息；</p><p>（3）判别中断条件，确定中断服务入口地址；</p><p>（4）开中断；</p><p>（5）执行中断服务程序；</p><p>（6）关中断；</p><p>（7）恢复现场信息；</p><p>（8）开中断。</p><p>4．中断屏蔽：CPU处理一个中断的过程中，对其他一些外部设备的中断进行阻止。通过CPU内部的一个中断屏蔽寄存器，用软件的方法修改中断屏蔽寄存器，以改变中断响应的优先顺序，实现对不同中断的分别禁止。</p><h3 id="中断输入输出接口" tabindex="-1"><a class="header-anchor" href="#中断输入输出接口" aria-hidden="true">#</a> 中断输入输出接口</h3><p>1．中断方式的接口控制器功能：</p><p>①能向CPU发出中断请求信号；</p><p>②能发出识别代码提供引导CPU在响应中断请求后转入相应服务程序的地址；</p><p>③CPU要能够对中断请求进行允许或禁止的控制；</p><p>④能使中断请求参加优先级排队。</p><p>2．中断接口基本组成：</p><p>①地址译码。选取接口中有关寄存器，也就是选择了I/O设备。</p><p>②命令字／状态字寄存器。供CPU输出控制命令，调回接口与设备的状态信息。</p><p>③数据缓存。提供数据缓冲，实现速度匹配。</p><p>④接口控制电路。如中断控制逻辑、与设备特性相关的控制逻辑等。</p><h2 id="dma方式" tabindex="-1"><a class="header-anchor" href="#dma方式" aria-hidden="true">#</a> DMA方式</h2><h3 id="dma-方式基本概念" tabindex="-1"><a class="header-anchor" href="#dma-方式基本概念" aria-hidden="true">#</a> DMA 方式基本概念</h3><p>1．DMA 方式：直接存储器访问，直接依靠硬件实现主存与外设之间的数据直接传输，传输过程本身不需CPU程序干预。<br> 2．DMA的数据传输过程：分三个阶段：<br> ① DMA传送前的预置阶段（DMA初始化）；<br> ②数据传送阶段（DMA传送）；<br> ③传送后的结束处理</p><h1 id="期末复习" tabindex="-1"><a class="header-anchor" href="#期末复习" aria-hidden="true">#</a> 期末复习</h1><ol><li>寻址方式</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202306241438592.png" alt="image-20230624143843527" tabindex="0" loading="lazy"><figcaption>image-20230624143843527</figcaption></figure><ol start="2"><li>全加器</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202306241439571.png" alt="image-20230624143947544" tabindex="0" loading="lazy"><figcaption>image-20230624143947544</figcaption></figure><blockquote><p>用到三个异或门，两个与门，一个或门</p></blockquote><ol start="3"><li>指令寻址</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202306241440991.png" alt="image-20230624144036957" tabindex="0" loading="lazy"><figcaption>image-20230624144036957</figcaption></figure><blockquote><p>DS :数据段寄存器</p><p>ES :辅助段寄存器</p><p>CS :代码段寄存器</p><p>SS :堆栈段寄存器</p><p>DISP ：位移值</p><p>EA：表示有效地址,对于直接寻址模式，EA的计算公式为EA = DS * 10H + Disp。</p></blockquote><ol start="4"><li>指令寻址</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202306241514314.png" alt="image-20230624151441272" tabindex="0" loading="lazy"><figcaption>image-20230624151441272</figcaption></figure><ol start="5"><li>中断处理</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202306241515573.png" alt="image-20230624151501542" tabindex="0" loading="lazy"><figcaption>image-20230624151501542</figcaption></figure><ol start="6"><li>CPU结构</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202306241515486.png" alt="image-20230624151517454" tabindex="0" loading="lazy"><figcaption>image-20230624151517454</figcaption></figure><ol start="7"><li>主存字扩展</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202306241515517.png" alt="image-20230624151542484" tabindex="0" loading="lazy"><figcaption>image-20230624151542484</figcaption></figure><h1 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h1><p>存储单元是指 存放⼀个机器字的所有存储元集合</p><p>某计算机字长<strong>16</strong>位，存储器容量<strong>64KB</strong>，若按字编址，那么它的寻址范围是**________**。</p>',78),c=a("blockquote",null,[a("p",null,[s("16位是2B, 寻址范围是"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mfrac",null,[a("mrow",null,[a("mn",null,"64"),a("mi",null,"K"),a("mi",null,"B")]),a("mrow",null,[a("mn",null,"4"),a("mi",null,"B")])]),a("mo",null,"="),a("mn",null,"32"),a("mi",null,"K")]),a("annotation",{encoding:"application/x-tex"},"\\frac{64KB}{4B}=32K")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1.2173em","vertical-align":"-0.345em"}}),a("span",{class:"mord"},[a("span",{class:"mopen nulldelimiter"}),a("span",{class:"mfrac"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8723em"}},[a("span",{style:{top:"-2.655em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"4"),a("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])]),a("span",{style:{top:"-3.23em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),a("span",{style:{top:"-3.394em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"64"),a("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.07153em"}},"K"),a("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.345em"}},[a("span")])])])]),a("span",{class:"mclose nulldelimiter"})]),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord"},"32"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"K")])])])])],-1),g=a("p",null,"某DRAM芯⽚，其存储容量为512K×8位，该芯⽚的地址线和数据线数⽬为______",-1),h=a("blockquote",null,[a("p",null,[s("地址线数目为前面 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mn",null,"2"),a("mn",null,"19")]),a("mo",null,"="),a("mn",null,"512"),a("mo",null,"∗"),a("msup",null,[a("mn",null,"2"),a("mn",null,"10")])]),a("annotation",{encoding:"application/x-tex"},"2^{19}=512*2^{10}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8141em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"19")])])])])])])])]),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"512"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"∗"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8141em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"10")])])])])])])])])])])]),s(",地址线为19 ，数据线为后面的8")])],-1),d=a("p",null,"某计算机字长32位，其存储容量为4MB，若按字编址，它的寻址范围是________",-1),u=a("blockquote",null,[a("p",null,[s("32位为4B，寻址范围为"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mfrac",null,[a("mrow",null,[a("mn",null,"4"),a("mi",null,"M"),a("mi",null,"B")]),a("mrow",null,[a("mn",null,"4"),a("mi",null,"B")])]),a("mo",null,"="),a("mn",null,"1"),a("mi",null,"M")]),a("annotation",{encoding:"application/x-tex"},"\\frac{4MB}{4B}=1M")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1.2173em","vertical-align":"-0.345em"}}),a("span",{class:"mord"},[a("span",{class:"mopen nulldelimiter"}),a("span",{class:"mfrac"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8723em"}},[a("span",{style:{top:"-2.655em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"4"),a("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])]),a("span",{style:{top:"-3.23em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),a("span",{style:{top:"-3.394em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"4"),a("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"MB")])])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.345em"}},[a("span")])])])]),a("span",{class:"mclose nulldelimiter"})]),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord"},"1"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M")])])])])],-1),b=l('<p>寄存器间接寻址⽅式中，操作数处在_</p><blockquote><p>内存单元</p></blockquote><ol><li>指令和数据都存放在主存，如何识别从主存取出的是指令还是数据？</li></ol><blockquote><p>​ 指令和数据都存放在主存，它们都以二进制代码形式出现，区分的方式有</p><p>从主存中取出的机器周期不同。取指周期取出的是指令，分析取数或执行周期取出的是数据</p><p>取指令和取数据时地址的来源不同。指令地址来源于程序计数器PC,数据地址来源于地址形成部件</p></blockquote><ol start="2"><li>简单描述计算机的层次结构。说明各层次的主要特点：</li></ol><blockquote><p>现代计算机系统是一个硬件与软件组成的综合体，可以把它看成是按功能划分的多级层次结构。<br> 第0级为硬件组成的实体。<br> 第1级是微程序级。这级的机器语言是微指令集，程序员用微指令编写的微程序一般是直接由硬件执行的。<br> 第2级是传统机器级。这级的机器语言是该机的指令集，程序员用机器指令编写的程序可以由微程序进行解释。<br> 第3级操作系统级。从操作系统的基本功能来看，一方面它要直接管理传统机器中的软硬件资源，另一方面它又是传统机器的延伸。<br> 第4级是汇编语言级。这级的机器语言是汇编语言，完成汇编语言翻译的程序叫做汇编程序。<br> 第5级是高级语言级。这级的机器语言就是各种高级语言，通常用编译程序来完成高级语言翻译工作。<br> 第6级是应用语言级。这一级是为了使计算机满足某种用途而专门设计的，因此这一级语言就是各种面向问题的应用语言。</p></blockquote><ol start="3"><li>在CPU中，哪些寄存器属于控制用的指令部件，它们各起什么作用？</li></ol><blockquote></blockquote><ol start="4"><li>中央处理器的基本功能有哪些</li></ol><blockquote><p>计算机的中央处理器( CPU )具有以下 4 个方面的基本功能: ( 1 )指令控制,即对程序运行的控制; ( 2 )操作控制,即对指令内操作步骤的控制; ( 3 )数据运算,即对数据进行算术运算和逻辑运算,这是 CPU 的最基本功能; ( 4 )异常处理和中断处理,如处理运算中的溢出等错误情况以及处理外部设备的服务请求等 此外, CPU 还具有存储管理、总线管理、电源管理等扩展功能</p></blockquote><ol start="5"><li>微程序控制器怎么产生操作控制信号，这种控制器有何优缺点</li></ol><blockquote><p>操作控制信号的产生：事先把操作控制信号以代码形式构成微指令，然后存放到控制存储器中，取出微指令时，其代码直接或译码产生操作控制信号。 优点：规整、易于修改和扩展。 缺点：速度较慢。</p></blockquote><ol start="6"><li>串行总线和并行总线有何区别？各适用什么场合</li></ol><blockquote><p>串行总线的数据传输是在一条线路上按位进行。线路成本低,传送速度慢。 适用场合:主机与低速外设间的传送、远距离通信总线的数据传送、系统之间的数据传送。 并行总线的每个数据位都需要单独一条传输线,所有的数据位同时进行传输。线路成本高,传送速度快。适用场合:短距离的高速数据传输。</p></blockquote><ol start="7"><li>系统总线接口有哪几项基本功能</li></ol><blockquote><p><a href="(1)%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8PC,%E6%8F%90%E4%BE%9B%E5%8F%96%E6%8C%87%E5%9C%B0%E5%9D%80,%E4%BB%8E%E8%80%8C%E6%8E%A7%E5%88%B6%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E3%80%82(2)%E6%8C%87%E4%BB%A4%E5%AF%84%E5%AD%98%E5%99%A8IR,%E5%AD%98%E6%94%BE%E7%8E%B0%E8%A1%8C%E6%8C%87%E4%BB%A4,%E4%BD%9C%E4%B8%BA%E4%BA%A7%E7%94%9F%E5%90%84%E7%A7%8D%E5%BE%AE%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%80%BB%E8%BE%91%E4%BE%9D%E6%8D%AE%E3%80%82(3)%E7%A8%8B%E5%BA%8F%E7%8A%B6%E6%80%81%E5%AF%84%E5%AD%98%E5%99%A8PS,%E8%AE%B0%E5%BD%95%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C%E7%9A%84%E6%9F%90%E4%BA%9B%E7%89%B9%E5%BE%81%E6%A0%87%E5%BF%97,%E6%88%96%E7%94%A8%E6%9D%A5%E8%AE%BE%E7%BD%AE%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%96%B9%E5%BC%8F%E4%B8%8E%E4%BC%98%E5%85%88%E7%BA%A7,%E5%8F%82%E4%B8%8E%E5%BD%A2%E6%88%90%E6%9F%90%E4%BA%9B%E5%BE%AE%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E3%80%82">答案</a>:① 控制:传递总线上的控制信息,主设备会通过总线接口向从设备发出控制信息。② 数据缓存:在总线传递信息时,在总线接口中临时存放数据。③ 状态设置通过总线和转换从设备的工作信息,便于主设备了解从设备的信息。④ 数据转换:某些总线接口需要对传递的数据进行转换。⑤ 整理:对接口本身进行调整。⑥ 程序中断。</p></blockquote><ol start="8"><li>什么是串行接口，什么是并行接口，他们与系统总线及IO设备之间的传递格式分别是什么？</li></ol><blockquote></blockquote><ol start="9"><li>何为中断方式？它主要用在什么场合，举两个例子：</li></ol><blockquote><p>①中断方式指：CPU在接到随机产生的中断请求信号后，暂停原程序，转去执行相应的中断处理程序，以处理该随机事件，处理完毕后返回并继续执行原程序；②主要应用于处理复杂随机事件、控制中低速1/O；③例：打印机控制，故障处理。</p></blockquote><ol start="10"><li>中断接口一般包含哪些基本组成，简要说明它们的作用</li></ol><blockquote><p>①地址译码。选取接口中有关寄存器，也就是选择了I/O设备。 ②命令字／状态字寄存器。供CPU输出控制命令，调回接口与设备的状态信息。 ③数据缓存。提供数据缓冲，实现速度匹配。 ④控制逻辑。如中断控制逻辑、与设备特性相关的控制逻辑等。</p></blockquote><h1 id="系统概述" tabindex="-1"><a class="header-anchor" href="#系统概述" aria-hidden="true">#</a> 系统概述</h1><ol><li>冯•诺依曼计算机中指令和数据均以二进制形式存放在存储器中，CPU是如何区分它们的？</li></ol><blockquote><p>答案：可以从时间上和空间上进行区别的<br> 时间上：对指令的访问只有在取指阶段，而对数据的访问是在分析和执行阶段的。所以可以从时间上进行区分</p><p>空间上：放置的位置不同，取指令和取数据时地址的来源不同指令地址来源于程序计数器PC,数据地址来源于地址形成部件或指令的地址码字段</p></blockquote><ol start="2"><li>冯诺伊曼计算机的特点</li></ol><blockquote><ol><li>硬件系统由运算器、存储器、控制器、输入设备和输出设备5个部件组成</li><li>采用二进制形式表示指令和数据</li><li>存储程序：将程序和数据存入计算机，在启动计算机工作</li></ol></blockquote><ol start="3"><li>硬件组成功能：</li></ol><blockquote><p>运算器：完成算术和逻辑运算<br> 存储器：存放数据和程序<br> 控制器：用来控制、执行程序<br> 输入设备：将信息输入到计算机中，转换为计算机能识别的形式<br> 输出设备：将机器的运算结果转换为人可识别的信息</p></blockquote><p>系统组成</p><blockquote><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202306251855024.png" alt="image-20230625185545952" tabindex="0" loading="lazy"><figcaption>image-20230625185545952</figcaption></figure></blockquote><p>层次结构：</p><blockquote><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202306251856058.png" alt="image-20230625185605033" tabindex="0" loading="lazy"><figcaption>image-20230625185605033</figcaption></figure></blockquote><p>技术指标：</p><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202306251902596.png" alt="image-20230625190253563" tabindex="0" loading="lazy"><figcaption>image-20230625190253563</figcaption></figure><p>机器字长：CPU进行一次运算所能处理的二进制数据的位数，简称字长，字长越长， 数据的表示范围越大，计算精度越高</p><blockquote><p>1位=1bit, 1字节=8bit, 1B=8b</p></blockquote><p>存储字长：一个存储单元中二进制代码的位数 &lt;=机器字长</p><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202306251909939.png" alt="image-20230625190951908" tabindex="0" loading="lazy"><figcaption>image-20230625190951908</figcaption></figure><p>指令字长：一个机器指令中包含的二进制代码的位数</p><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202306251908898.png" alt="image-20230625190813857" tabindex="0" loading="lazy"><figcaption>image-20230625190813857</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202306251912438.png" alt="image-20230625191200402" tabindex="0" loading="lazy"><figcaption>image-20230625191200402</figcaption></figure><h1 id="存储系统" tabindex="-1"><a class="header-anchor" href="#存储系统" aria-hidden="true">#</a> 存储系统</h1><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202306252049857.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="指令系统" tabindex="-1"><a class="header-anchor" href="#指令系统" aria-hidden="true">#</a> 指令系统</h1><p>复杂：</p><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202306252239026.png" alt="image-20230625223956960" tabindex="0" loading="lazy"><figcaption>image-20230625223956960</figcaption></figure><p>精简：</p><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202306252240217.png" alt="image-20230625224008191" tabindex="0" loading="lazy"><figcaption>image-20230625224008191</figcaption></figure>',49),E=[p,r,m,o,c,g,h,d,u,b];function f(y,B){return t(),e("div",null,E)}const x=i(n,[["render",f],["__file","计算机组成原理期末考试.html.vue"]]);export{x as default};
