const n=JSON.parse('{"key":"v-0bdd9695","path":"/algorithm/1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html","title":"排序算法","lang":"zh-CN","frontmatter":{"title":"排序算法","date":"2023-04-05T17:22:03.000Z","category":["Algorithm","基础算法"],"tag":["Algorithm","基础算法","排序","逆序对","模版"],"description":"1.排序 1.1快速排序 思路 1.确定区间中的某一点，如a[l],a[r],a[(l+r)/2]等等， 2.将数组分为左右两边，左边全为比分界点小的数，右边全为比分界点大的数， 代码 #include&lt;iostream&gt; using namespace std; const int N=1e6+10; int n; int q[N]; void qucik_sort(int q[],int l,int r){ \\tif(l==r) return; \\tint x=q[l],i=l-1,j=r+1; \\twhile(i&lt;j){ \\t\\tdo i++; while(q[i]&lt;x); \\t\\tdo j--; while(q[j]&gt;x); \\t\\tif(i&lt;j) swap(q[i],q[j]); \\t} \\tqucik_sort(q,l,j); \\tqucik_sort(q,j+1,r); } int main(){ \\tscanf(\\"%d\\",&amp;n); \\tfor(int i=0;i&lt;n;i++) scanf(\\"%d\\",&amp;q[i]); \\tqucik_sort(q,0,n-1); \\tfor(int i=0;i&lt;n;i++) printf(\\"%d\\",q[i]); }","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/algorithm/1-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"全民制作人ikun"}],["meta",{"property":"og:title","content":"排序算法"}],["meta",{"property":"og:description","content":"1.排序 1.1快速排序 思路 1.确定区间中的某一点，如a[l],a[r],a[(l+r)/2]等等， 2.将数组分为左右两边，左边全为比分界点小的数，右边全为比分界点大的数， 代码 #include&lt;iostream&gt; using namespace std; const int N=1e6+10; int n; int q[N]; void qucik_sort(int q[],int l,int r){ \\tif(l==r) return; \\tint x=q[l],i=l-1,j=r+1; \\twhile(i&lt;j){ \\t\\tdo i++; while(q[i]&lt;x); \\t\\tdo j--; while(q[j]&gt;x); \\t\\tif(i&lt;j) swap(q[i],q[j]); \\t} \\tqucik_sort(q,l,j); \\tqucik_sort(q,j+1,r); } int main(){ \\tscanf(\\"%d\\",&amp;n); \\tfor(int i=0;i&lt;n;i++) scanf(\\"%d\\",&amp;q[i]); \\tqucik_sort(q,0,n-1); \\tfor(int i=0;i&lt;n;i++) printf(\\"%d\\",q[i]); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-28T07:54:15.000Z"}],["meta",{"property":"article:author","content":"全民制作人ikun"}],["meta",{"property":"article:tag","content":"Algorithm"}],["meta",{"property":"article:tag","content":"基础算法"}],["meta",{"property":"article:tag","content":"排序"}],["meta",{"property":"article:tag","content":"逆序对"}],["meta",{"property":"article:tag","content":"模版"}],["meta",{"property":"article:published_time","content":"2023-04-05T17:22:03.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-28T07:54:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"排序算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-05T17:22:03.000Z\\",\\"dateModified\\":\\"2024-04-28T07:54:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全民制作人ikun\\",\\"url\\":\\"https://github.com/yunfeidog\\"}]}"]]},"headers":[{"level":2,"title":"1.1快速排序","slug":"_1-1快速排序","link":"#_1-1快速排序","children":[{"level":3,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":3,"title":"代码","slug":"代码","link":"#代码","children":[]},{"level":3,"title":"题目：","slug":"题目","link":"#题目","children":[]}]},{"level":2,"title":"1.2.归并排序","slug":"_1-2-归并排序","link":"#_1-2-归并排序","children":[{"level":3,"title":"思路","slug":"思路-1","link":"#思路-1","children":[]},{"level":3,"title":"代码","slug":"代码-1","link":"#代码-1","children":[]}]}],"git":{"createdTime":1698489661000,"updatedTime":1714290855000,"contributors":[{"name":"yunfeidog","email":"1844025705@qq.com","commits":2}]},"readingTime":{"minutes":1.65,"words":495},"filePathRelative":"algorithm/1-基础算法/排序算法.md","localizedDate":"2023年4月5日","excerpt":"<h1> 1.排序</h1>\\n<h2> 1.1快速排序</h2>\\n<h3> 思路</h3>\\n<p>1.确定区间中的某一点，如a[l],a[r],a[(l+r)/2]等等，</p>\\n<p>2.将数组分为左右两边，左边全为比分界点小的数，右边全为比分界点大的数，</p>\\n<h3> 代码</h3>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token keyword\\">namespace</span> std<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">int</span> N<span class=\\"token operator\\">=</span><span class=\\"token number\\">1e6</span><span class=\\"token operator\\">+</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> q<span class=\\"token punctuation\\">[</span>N<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">qucik_sort</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> q<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> l<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> r<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>l<span class=\\"token operator\\">==</span>r<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">int</span> x<span class=\\"token operator\\">=</span>q<span class=\\"token punctuation\\">[</span>l<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>i<span class=\\"token operator\\">=</span>l<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span>j<span class=\\"token operator\\">=</span>r<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token operator\\">&lt;</span>j<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">do</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>q<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&lt;</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">do</span> j<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>q<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&gt;</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token operator\\">&lt;</span>j<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span>q<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>q<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token function\\">qucik_sort</span><span class=\\"token punctuation\\">(</span>q<span class=\\"token punctuation\\">,</span>l<span class=\\"token punctuation\\">,</span>j<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token function\\">qucik_sort</span><span class=\\"token punctuation\\">(</span>q<span class=\\"token punctuation\\">,</span>j<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span>r<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token function\\">scanf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token operator\\">&amp;</span>n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">&lt;</span>n<span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">scanf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token operator\\">&amp;</span>q<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token function\\">qucik_sort</span><span class=\\"token punctuation\\">(</span>q<span class=\\"token punctuation\\">,</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>n<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">&lt;</span>n<span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d\\"</span><span class=\\"token punctuation\\">,</span>q<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"全民制作人cxk","license":"CC-BY-NC-SA-4.0"},"autoDesc":true}');export{n as data};
