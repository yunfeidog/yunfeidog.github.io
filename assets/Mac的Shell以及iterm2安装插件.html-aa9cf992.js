import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as t,c,b as e,d as a,e as n,a as r}from"./app-51564aae.js";const d={},o=r(`<h1 id="shell相关" tabindex="-1"><a class="header-anchor" href="#shell相关" aria-hidden="true">#</a> Shell相关</h1><p>mac有两种shell，zsh和bash，zsh兼容bash</p><p>查看当前使用的shell</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token environment constant">$SHELL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>切换bash</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>chsh <span class="token parameter variable">-s</span> /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>切换zsh</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>chsh <span class="token parameter variable">-s</span> /bin/zsh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>bash:读取<code>~/.bash_profile</code>文件</p><p>zsh:读取<code>~/.zshrc</code>文件</p><h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h2><p>在 macOS 系统下，四个文件都可以用来设置 shell 的环境变量和控制用户的 shell 行为。但是，它们各自有不同的作用范围和加载时机：</p><ol><li><code>/etc/profile</code>：在用户登录系统时被读取，定义系统级别的环境变量，并且对所有用户都生效。</li><li><code>/etc/bashrc</code>：在交互式 shell 启动时被读取，定义系统级别的 bash 命令别名和 shell 函数，并且对所有用户都生效。</li><li><code>~/.bashrc</code>：在交互式 shell 启动时被读取，定义个人级别的 bash 命令别名和 shell 函数，并且只对当前用户生效。</li><li><code>~/.bash_profile</code>：在用户登录系统时被读取，定义个人级别的环境变量和用户特定的 shell 配置，并且只对当前用户生效。</li><li><code>~/.zshrc</code> 是 Zsh shell 的配置文件，是使用 Zsh 时读取的主要配置文件之一。它存放在用户目录下的 <code>~/.zshrc</code> 文件中。</li></ol><p>简单说来，<code>/etc/profile</code> 和 <code>/etc/bashrc</code> 是系统级别的配置文件，用于所有用户，而 <code>~/.bashrc</code> 和 <code>~/.bash_profile</code> 是个人级别的配置文件，只对个人生效。其中，个人配置文件的优先级高于系统配置文件，即如果同一个环境变量在两个文件中都存在，那么个人配置文件中的会覆盖系统配置文件中的。</p><h2 id="安装-oh-my-zsh" tabindex="-1"><a class="header-anchor" href="#安装-oh-my-zsh" aria-hidden="true">#</a> 安装 Oh My Zsh</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="安装语法高亮插件" tabindex="-1"><a class="header-anchor" href="#安装语法高亮插件" aria-hidden="true">#</a> 安装语法高亮插件</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置，加入到环境变量中，可以加入到<code>~/.zshrc</code>或者<code>~/.bash_profile</code>,注意加到是zsh-syntax-highlighting文件夹里面的那个zsh-syntax-highlighting.zsh,可以先去复制这个文件，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> /Users/houyunfei/tools/on-my-zsh-beautification/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202305122236724.png" alt="image-20230512223627668" tabindex="0" loading="lazy"><figcaption>image-20230512223627668</figcaption></figure><p>之后就可以看到语法高亮了，</p><blockquote><p>未打完的source，显示红色</p></blockquote><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202305122238372.png" alt="image-20230512223824347" tabindex="0" loading="lazy"><figcaption>image-20230512223824347</figcaption></figure><blockquote><p>打完的source，显示绿色，同时后面的文件可以按住command打开</p></blockquote><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202305122239810.png" alt="image-20230512223924777" tabindex="0" loading="lazy"><figcaption>image-20230512223924777</figcaption></figure><h2 id="安装命令自动补全插件" tabindex="-1"><a class="header-anchor" href="#安装命令自动补全插件" aria-hidden="true">#</a> 安装命令自动补全插件</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/zsh-users/zsh-autosuggestions
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着配置环境变量，跟上面一样</p><p>安装好之后，就可以看到终端会猜测你接下来要使用的命令了</p><figure><img src="https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202305122247160.png" alt="image-20230512224707126" tabindex="0" loading="lazy"><figcaption>image-20230512224707126</figcaption></figure><h2 id="其他美化" tabindex="-1"><a class="header-anchor" href="#其他美化" aria-hidden="true">#</a> 其他美化</h2><h3 id="powerline" tabindex="-1"><a class="header-anchor" href="#powerline" aria-hidden="true">#</a> powerline</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  pip <span class="token function">install</span> powerline-status <span class="token parameter variable">--user</span>
  
  <span class="token comment"># clone</span>
<span class="token function">git</span> clone https://github.com/powerline/fonts.git <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token comment"># install</span>
<span class="token builtin class-name">cd</span> fonts
./install.sh
<span class="token comment"># clean-up a bit</span>
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> fonts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tmux" tabindex="-1"><a class="header-anchor" href="#tmux" aria-hidden="true">#</a> Tmux</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>brew <span class="token function">install</span> tmux
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,36),h={href:"https://www.cnblogs.com/zuoruining/p/11074367.html",target:"_blank",rel:"noopener noreferrer"},p=e("p",null,[a("重新加载配置："),e("code",null,"Control+b+shift+i")],-1),u=e("p",null,"插件：",-1),m={href:"https://github.com/tmux-plugins/tpm",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/dracula/tmux",target:"_blank",rel:"noopener noreferrer"};function g(v,f){const s=l("ExternalLinkIcon");return t(),c("div",null,[o,e("p",null,[e("a",h,[a("https://www.cnblogs.com/zuoruining/p/11074367.html"),n(s)])]),p,u,e("p",null,[e("a",m,[a("https://github.com/tmux-plugins/tpm"),n(s)])]),e("p",null,[e("a",b,[a("https://github.com/dracula/tmux"),n(s)])])])}const _=i(d,[["render",g],["__file","Mac的Shell以及iterm2安装插件.html.vue"]]);export{_ as default};
