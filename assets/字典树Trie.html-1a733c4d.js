const e=JSON.parse('{"key":"v-6e3df35f","path":"/algorithm/3-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E5%85%B8%E6%A0%91Trie.html","title":"字典树Trie","lang":"zh-CN","frontmatter":{"title":"字典树Trie","date":"2023-07-26T14:00:28.000Z","category":["Algorithm","动态规划"],"tag":["Algorithm","动态规划"],"description":"Trie树又称字典树，前缀树。是一种可以高效查询前缀字符串的树，典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。 它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。`做题看到大量字符串或者大量字符就往Trie树或者哈希这边想，因为速度很快. image.png","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/algorithm/3-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E5%85%B8%E6%A0%91Trie.html"}],["meta",{"property":"og:site_name","content":"全民制作人ikun"}],["meta",{"property":"og:title","content":"字典树Trie"}],["meta",{"property":"og:description","content":"Trie树又称字典树，前缀树。是一种可以高效查询前缀字符串的树，典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。 它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。`做题看到大量字符串或者大量字符就往Trie树或者哈希这边想，因为速度很快. image.png"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-28T07:54:15.000Z"}],["meta",{"property":"article:author","content":"全民制作人ikun"}],["meta",{"property":"article:tag","content":"Algorithm"}],["meta",{"property":"article:tag","content":"动态规划"}],["meta",{"property":"article:published_time","content":"2023-07-26T14:00:28.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-28T07:54:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字典树Trie\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-26T14:00:28.000Z\\",\\"dateModified\\":\\"2024-04-28T07:54:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全民制作人ikun\\",\\"url\\":\\"https://github.com/yunfeidog\\"}]}"]]},"headers":[{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"代码","slug":"代码","link":"#代码","children":[]},{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"输入格式","slug":"输入格式-1","link":"#输入格式-1","children":[]},{"level":2,"title":"输出格式","slug":"输出格式-1","link":"#输出格式-1","children":[]},{"level":2,"title":"样例 #1","slug":"样例-1","link":"#样例-1","children":[{"level":3,"title":"样例输入 #1","slug":"样例输入-1","link":"#样例输入-1","children":[]},{"level":3,"title":"样例输出 #1","slug":"样例输出-1","link":"#样例输出-1","children":[]}]},{"level":2,"title":"提示","slug":"提示","link":"#提示","children":[{"level":3,"title":"数据规模与约定","slug":"数据规模与约定","link":"#数据规模与约定","children":[]},{"level":3,"title":"说明","slug":"说明","link":"#说明","children":[]}]},{"level":2,"title":"思路","slug":"思路-1","link":"#思路-1","children":[]},{"level":2,"title":"代码","slug":"代码-1","link":"#代码-1","children":[]},{"level":2,"title":"思路","slug":"思路-2","link":"#思路-2","children":[]},{"level":2,"title":"代码","slug":"代码-2","link":"#代码-2","children":[]},{"level":2,"title":"题目描述","slug":"题目描述-1","link":"#题目描述-1","children":[]},{"level":2,"title":"输入格式","slug":"输入格式-3","link":"#输入格式-3","children":[]},{"level":2,"title":"输出格式","slug":"输出格式-3","link":"#输出格式-3","children":[]},{"level":2,"title":"样例 #1","slug":"样例-1-1","link":"#样例-1-1","children":[{"level":3,"title":"样例输入 #1","slug":"样例输入-1-1","link":"#样例输入-1-1","children":[]},{"level":3,"title":"样例输出 #1","slug":"样例输出-1-1","link":"#样例输出-1-1","children":[]}]},{"level":2,"title":"提示","slug":"提示-1","link":"#提示-1","children":[{"level":3,"title":"数据范围","slug":"数据范围-2","link":"#数据范围-2","children":[]}]},{"level":2,"title":"思路","slug":"思路-3","link":"#思路-3","children":[]},{"level":2,"title":"代码","slug":"代码-3","link":"#代码-3","children":[]},{"level":2,"title":"题目描述","slug":"题目描述-2","link":"#题目描述-2","children":[]},{"level":2,"title":"思路-01Trie","slug":"思路-01trie","link":"#思路-01trie","children":[]},{"level":2,"title":"思路-结论","slug":"思路-结论","link":"#思路-结论","children":[{"level":3,"title":"代码","slug":"代码-4","link":"#代码-4","children":[]}]}],"git":{"createdTime":1698489661000,"updatedTime":1714290855000,"contributors":[{"name":"yunfeidog","email":"1844025705@qq.com","commits":2}]},"readingTime":{"minutes":9.68,"words":2903},"filePathRelative":"algorithm/3-数据结构/字典树Trie.md","localizedDate":"2023年7月26日","excerpt":"<blockquote>\\n<p>Trie树又称字典树，前缀树。是一种可以高效查询前缀字符串的树，典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。</p>\\n<p>它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。`做题看到大量字符串或者大量字符就往Trie树或者哈希这边想，因为速度很快.</p>\\n<figure><img src=\\"https://cdn.jsdelivr.net/gh/yunfeidog/picture-bed@main/img/202307261420328.png\\" alt=\\"image.png\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image.png</figcaption></figure>\\n</blockquote>","copyright":{"author":"全民制作人cxk","license":"CC-BY-NC-SA-4.0"},"autoDesc":true}');export{e as data};
