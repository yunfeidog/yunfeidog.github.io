import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as e,a,b as n,d as s}from"./app-51564aae.js";const o={},c=a(`<h1 id="算法分析基础上机题目" tabindex="-1"><a class="header-anchor" href="#算法分析基础上机题目" aria-hidden="true">#</a> 算法分析基础上机题目</h1><h2 id="_1-旅行商问题" tabindex="-1"><a class="header-anchor" href="#_1-旅行商问题" aria-hidden="true">#</a> 1.旅行商问题</h2><h3 id="【问题描述】" tabindex="-1"><a class="header-anchor" href="#【问题描述】" aria-hidden="true">#</a> 【问题描述】</h3><p>假设有一个旅行商人要拜访n个城市，他必须选择所要走的路径，路径的限制是每个城市只能拜访一次，而且最后要回到原来出发的城市。路径的选择目标是要求得的路径路程为所有路径之中的最小值。</p><h3 id="【输入形式】" tabindex="-1"><a class="header-anchor" href="#【输入形式】" aria-hidden="true">#</a> 【输入形式】</h3><p>城市数目，以及城市之间的距离</p><h3 id="【输出形式】" tabindex="-1"><a class="header-anchor" href="#【输出形式】" aria-hidden="true">#</a> 【输出形式】</h3><p>所有路径之中的最小值</p><h3 id="【样例输入】" tabindex="-1"><a class="header-anchor" href="#【样例输入】" aria-hidden="true">#</a> 【样例输入】</h3><p>4</p><p>0,10,15,20</p><p>10,0,35,25</p><p>15,35,0,30</p><p>20,25,30,0</p><h3 id="【样例输出】" tabindex="-1"><a class="header-anchor" href="#【样例输出】" aria-hidden="true">#</a> 【样例输出】</h3><p>80</p><h3 id="【样例说明】" tabindex="-1"><a class="header-anchor" href="#【样例说明】" aria-hidden="true">#</a> 【样例说明】</h3><p>第一行说明有4个城市；第2至5行说明一个城市与其他城市的距离，其中城市到其自身的距离为0，不可达的城市之间的距离为0。</p><h3 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h3><p>数据较小，直接全排列枚举所有方案</p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> itertools <span class="token keyword">import</span> permutations

n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">tsp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> ls<span class="token punctuation">)</span><span class="token punctuation">:</span>
    cities <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
    res <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;inf&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> path <span class="token keyword">in</span> permutations<span class="token punctuation">(</span>cities<span class="token punctuation">)</span><span class="token punctuation">:</span>
        distance <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            distance <span class="token operator">+=</span> ls<span class="token punctuation">[</span>path<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
        res <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> distance<span class="token punctuation">)</span>
    <span class="token keyword">return</span> res


<span class="token keyword">print</span><span class="token punctuation">(</span>tsp<span class="token punctuation">(</span>n<span class="token punctuation">,</span> ls<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-邮局选址问题" tabindex="-1"><a class="header-anchor" href="#_2-邮局选址问题" aria-hidden="true">#</a> 2.邮局选址问题</h2><h3 id="【问题描述】-1" tabindex="-1"><a class="header-anchor" href="#【问题描述】-1" aria-hidden="true">#</a> 【问题描述】</h3><p>对一个以XY轴表达的城市里，n个居民点散乱分布，居民点位置可以用坐标(x,y)表示，任意两点(x1,y1)(x2,y2)间距离可以用| x1-x1|+|y1-y2|度量，居民希望在城市中选择建立邮局的最佳位置，使得n个居民点到邮局的距离总和最小</p><h3 id="【输入形式】-1" tabindex="-1"><a class="header-anchor" href="#【输入形式】-1" aria-hidden="true">#</a> 【输入形式】</h3><p>居民点数目，以及居民点的坐标</p><h3 id="【输出形式】-1" tabindex="-1"><a class="header-anchor" href="#【输出形式】-1" aria-hidden="true">#</a> 【输出形式】</h3><p>最小的距离总和</p><h3 id="【样例输入】-1" tabindex="-1"><a class="header-anchor" href="#【样例输入】-1" aria-hidden="true">#</a> 【样例输入】</h3><p>3</p><p>3 3</p><p>1 6</p><p>4 9</p><h3 id="【样例输出】-1" tabindex="-1"><a class="header-anchor" href="#【样例输出】-1" aria-hidden="true">#</a> 【样例输出】</h3><p>9</p><h3 id="思路-1" tabindex="-1"><a class="header-anchor" href="#思路-1" aria-hidden="true">#</a> 思路</h3><p>贪心的思想，首先这个问题可以将横纵坐标分开考虑，对答案没影响，则问题转换为在一维坐标轴上面选择一个点，使得所有点到它的距离加起来最小。</p><p>放到最中间距离最小，因为假设有两个点AB，需要放置C点，如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>A  C 	B
A     B  C
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>显然放中间距离为AB，放两边距离为AB+BC/AC</p><h3 id="代码-1" tabindex="-1"><a class="header-anchor" href="#代码-1" aria-hidden="true">#</a> 代码</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    b<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>
<span class="token comment">## 排序</span>
a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
b<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">## 最优的选择就是放中间</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">+=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span>n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-最优合并问题" tabindex="-1"><a class="header-anchor" href="#_3-最优合并问题" aria-hidden="true">#</a> 3.最优合并问题</h2><h3 id="【问题描述】-2" tabindex="-1"><a class="header-anchor" href="#【问题描述】-2" aria-hidden="true">#</a> 【问题描述】</h3><p>给定k个排好序的序列s1,s2,…,sk，用2路合并算法将这k个序列合并成一个序列。假设所采用的2路合并算法合并两个长度分别为m和n的序列需要m+n-1次比较。试设计一个算法确定合并这个序列的最优合并顺序，使所需要的总比较次数最少。</p><h3 id="【输入形式】-2" tabindex="-1"><a class="header-anchor" href="#【输入形式】-2" aria-hidden="true">#</a> 【输入形式】</h3><p>序列数目，以及各个序列中的元素数目。</p><h3 id="【输出形式】-2" tabindex="-1"><a class="header-anchor" href="#【输出形式】-2" aria-hidden="true">#</a> 【输出形式】</h3><p>最少的总比较次数</p><h3 id="【样例输入】-2" tabindex="-1"><a class="header-anchor" href="#【样例输入】-2" aria-hidden="true">#</a> 【样例输入】</h3><p>4</p><p>5 12 11 2</p><h3 id="【样例输出】-2" tabindex="-1"><a class="header-anchor" href="#【样例输出】-2" aria-hidden="true">#</a> 【样例输出】</h3><p>52</p><h3 id="思路-2" tabindex="-1"><a class="header-anchor" href="#思路-2" aria-hidden="true">#</a> 思路</h3><p>贪心的思想：使用一个优先队列，每次从队列中取出两个最小的序列进行合并，再将得到的结果插入到优先队列中去。</p><h3 id="代码-2" tabindex="-1"><a class="header-anchor" href="#代码-2" aria-hidden="true">#</a> 代码</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> heapq

n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
priority_queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> ls<span class="token punctuation">:</span> heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>priority_queue<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
res <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>priority_queue<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>priority_queue<span class="token punctuation">)</span>
    b <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>priority_queue<span class="token punctuation">)</span>
    res <span class="token operator">+=</span> a <span class="token operator">+</span> b <span class="token operator">-</span> <span class="token number">1</span>
    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>priority_queue<span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-堆排序" tabindex="-1"><a class="header-anchor" href="#_4-堆排序" aria-hidden="true">#</a> 4.堆排序</h2><p>###【问题描述】</p><p>排序问题： 给定一个无序序列，采用”堆排序“方法对序列升序排序。</p><h3 id="【输入形式】-3" tabindex="-1"><a class="header-anchor" href="#【输入形式】-3" aria-hidden="true">#</a> 【输入形式】</h3><p>无序的整数序列</p><h3 id="【输出形式】-3" tabindex="-1"><a class="header-anchor" href="#【输出形式】-3" aria-hidden="true">#</a> 【输出形式】</h3><p>升序的整数序列</p><h3 id="【样例输入】-3" tabindex="-1"><a class="header-anchor" href="#【样例输入】-3" aria-hidden="true">#</a> 【样例输入】</h3><p>12,11,13, 5, 6,7</p><h3 id="【样例输出】-3" tabindex="-1"><a class="header-anchor" href="#【样例输出】-3" aria-hidden="true">#</a> 【样例输出】</h3><p>5, 6, 7,11,12,13</p><h3 id="【样例说明】-1" tabindex="-1"><a class="header-anchor" href="#【样例说明】-1" aria-hidden="true">#</a> 【样例说明】</h3><p>以逗号隔开的序列, 程序内需要转化为整数序列</p><h3 id="思路-3" tabindex="-1"><a class="header-anchor" href="#思路-3" aria-hidden="true">#</a> 思路</h3><p>堆的性质</p><ol><li>堆中某个节点的值总是不大于或不小于其父节点的值；</li><li>堆总是一棵完全二叉树。</li><li>最后一个非叶结点是第n/2个结点。这里建堆的时候会用到，复杂度可以降到O(n)；</li><li>如果一个点为u，那么它的左儿子为2<em>u，右儿子为2</em>u+1</li><li>对于小根堆来讲，每个以u为根节点的树，它的左右儿子的值一定大于父节点。所以对堆进行建立的时候，如果当前点与它的左右儿子并不满足这一性质，就需要进行交换。</li></ol><ul><li>小根堆：子节点比父节点大</li><li>大根堆：子节点比父节点小</li></ul><p>显然这里是升序，因此需要小根堆</p><h3 id="代码-3" tabindex="-1"><a class="header-anchor" href="#代码-3" aria-hidden="true">#</a> 代码</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 堆排序</span>
<span class="token keyword">def</span> <span class="token function">heapify</span><span class="token punctuation">(</span>ls<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    largest <span class="token operator">=</span> i
    l <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span>
    r <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span>
    <span class="token keyword">if</span> l <span class="token operator">&lt;</span> n <span class="token keyword">and</span> ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> ls<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">:</span>
        largest <span class="token operator">=</span> l
    <span class="token keyword">if</span> r <span class="token operator">&lt;</span> n <span class="token keyword">and</span> ls<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">&lt;</span> ls<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>
        largest <span class="token operator">=</span> r
    <span class="token keyword">if</span> largest <span class="token operator">!=</span> i<span class="token punctuation">:</span>
        ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ls<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">=</span> ls<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">,</span> ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        heapify<span class="token punctuation">(</span>ls<span class="token punctuation">,</span> n<span class="token punctuation">,</span> largest<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">heapSort</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        heapify<span class="token punctuation">(</span>ls<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        heapify<span class="token punctuation">(</span>ls<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>


ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
heapSort<span class="token punctuation">(</span>ls<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> ls<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-布线问题" tabindex="-1"><a class="header-anchor" href="#_5-布线问题" aria-hidden="true">#</a> 5.布线问题</h2><blockquote><p>苏科大的sb输入输出数据，题目描述的输入输出和答案数据全是乱的。</p></blockquote><h3 id="【问题描述】-3" tabindex="-1"><a class="header-anchor" href="#【问题描述】-3" aria-hidden="true">#</a> 【问题描述】</h3><p>印刷电路板将布线区域划分成n*m个方格，精确的电路布线问题要求确定连接方格a的中点到方格b的中点的最短布线方案。在布线时，电路只能沿直线或直角布线。为了避免线路相交，已经布了线的方格不允许其他线穿过。对给定的电路板，找出最短的布线路径。</p><h3 id="【输入形式】-4" tabindex="-1"><a class="header-anchor" href="#【输入形式】-4" aria-hidden="true">#</a> 【输入形式】</h3><p>方阵的行数、列数、布线区域方阵(其中不能通过的地方输入1，能通过的地方输入0)、起点坐标、终点坐标</p><h3 id="【输出形式】-4" tabindex="-1"><a class="header-anchor" href="#【输出形式】-4" aria-hidden="true">#</a> 【输出形式】</h3><p>线路长度以及线路包含的方格坐标</p><h3 id="【样例输入】-4" tabindex="-1"><a class="header-anchor" href="#【样例输入】-4" aria-hidden="true">#</a> 【样例输入】</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>6 6
0 0 1 0 0 0
0 0 1 1 0 0
0 0 0 0 1 0
0 0 0 1 1 0
1 0 0 0 1 0
1 1 1 0 0 0
1 2
4 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【样例输出】-4" tabindex="-1"><a class="header-anchor" href="#【样例输出】-4" aria-hidden="true">#</a> 【样例输出】</h3><p>4</p><p>1,2 &gt; 2,2 &gt; 3,2 &gt; 4,2 &gt; 4,3</p><h3 id="【样例说明】-2" tabindex="-1"><a class="header-anchor" href="#【样例说明】-2" aria-hidden="true">#</a> 【样例说明】</h3><p>第1行输入方阵的行数、列数</p><p>第2-7行输入方阵元素，不能通过的地方输入1，能通过的地方输入0</p><p>第8行输入起点坐标</p><p>第9行输入终点坐标</p><p>所有元素用空格分隔, 且坐标索引从1开始！！</p><h3 id="思路-4" tabindex="-1"><a class="header-anchor" href="#思路-4" aria-hidden="true">#</a> 思路</h3><p>思路很简单，就是BFS求最短路，只不过需要输出路径，那就记录前一个节点，最后回溯回去就可以</p><h3 id="代码-4" tabindex="-1"><a class="header-anchor" href="#代码-4" aria-hidden="true">#</a> 代码</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> queue

<span class="token comment">## 输入地图大小</span>
n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">## 初始化地图</span>
g <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    g<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment">## 输入起点和终点</span>
start <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
end <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">## 初始化距离和状态数组，以及父节点数组</span>
dist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
st <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
father <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment">## BFS 队列初始化，加入起点</span>
q <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>start<span class="token punctuation">)</span>
st<span class="token punctuation">[</span>start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>

flag <span class="token operator">=</span> <span class="token boolean">False</span>
<span class="token keyword">while</span> <span class="token keyword">not</span> q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> flag<span class="token punctuation">:</span>
    <span class="token comment">## 弹出队首元素</span>
    t <span class="token operator">=</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">## 枚举四个方向</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        y <span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token comment">## 判断是否越界或者障碍物已经被标记</span>
        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token keyword">or</span> x <span class="token operator">&gt;</span> n <span class="token keyword">or</span> y <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token keyword">or</span> y <span class="token operator">&gt;</span> m<span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        <span class="token keyword">if</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> st<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token comment">## 如果可以走，则加入队列，更新距离，标记状态，记录父节点</span>
            q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>
            dist<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
            st<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
            father<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token comment">## 判断是否到达终点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">==</span> end<span class="token punctuation">:</span>
                flag <span class="token operator">=</span> <span class="token boolean">True</span>
                <span class="token keyword">break</span>

<span class="token comment">## 输出最短路距离</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>end<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">## 再次 BFS，打印路径</span>
path <span class="token operator">=</span> <span class="token punctuation">[</span>end<span class="token punctuation">]</span>
x <span class="token operator">=</span> end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
y <span class="token operator">=</span> end<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">!=</span> start<span class="token punctuation">:</span>
    <span class="token comment">## 获取当前点的父节点</span>
    x<span class="token punctuation">,</span> y <span class="token operator">=</span> father<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span>
    path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">## 反转路径，并输出</span>
path<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{},{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{},{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;--&gt;&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他三个测试数据如下：</p><p>由第一个数据看出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>## 测试数据1
6 6
0 0 1 0 0 0
0 0 1 1 0 0
0 0 0 0 1 0
0 0 0 1 1 0
1 0 0 0 1 0
1 1 1 0 0 0
1 2
4 3
## 输出
4
1,2--&gt;2,2--&gt;3,2--&gt;4,2--&gt;4,3


## 测试数据2
6 6
1 1 1 1 0 0
0 0 0 0 1 0
0 0 0 1 1 0
1 0 0 0 0 0
1 1 1 0 0 0
3 1
3 6
## 输出
9
3,1--&gt;4,1--&gt;4,2--&gt;5,2--&gt;5,3--&gt;5,4--&gt;5,5--&gt;5,6--&gt;4,6--&gt;3,6


## 测试数据3
4 4
0 1 0 0
0 1 0 1
0 0 0 0
0 0 1 1
1 1
1 4
## 输出
7
1,1--&gt;2,1--&gt;3,1--&gt;3,2--&gt;3,3--&gt;2,3--&gt;1,3--&gt;1,4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-汽车加油问题" tabindex="-1"><a class="header-anchor" href="#_6-汽车加油问题" aria-hidden="true">#</a> 6.汽车加油问题</h2><blockquote><p>第二个测试数据最后莫名其妙加一些空格</p></blockquote><h3 id="【问题描述】-4" tabindex="-1"><a class="header-anchor" href="#【问题描述】-4" aria-hidden="true">#</a> 【问题描述】</h3><p>一辆汽车加满油后可以行驶n千米。旅途中有k个加油站。若要使沿途的加油次数最少，设计一个有效的算法，采用贪心算法，编程计算并输出最少加油次数，以及指出应在那些加油站停靠加油。</p><h3 id="【输入形式】-5" tabindex="-1"><a class="header-anchor" href="#【输入形式】-5" aria-hidden="true">#</a> 【输入形式】</h3><p>两行标准输入，数字通过空格分隔</p><h3 id="【输出形式】-5" tabindex="-1"><a class="header-anchor" href="#【输出形式】-5" aria-hidden="true">#</a> 【输出形式】</h3><p>将编程计算出的最少加油次数，以及哪些加油站，输出到文件ouput.txt。如果无法到达目的地，则输出“No Solution”。</p><h3 id="【样例输入】-5" tabindex="-1"><a class="header-anchor" href="#【样例输入】-5" aria-hidden="true">#</a> 【样例输入】</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>7 7
1 2 3 4 5 1 6 6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【样例输出】-5" tabindex="-1"><a class="header-anchor" href="#【样例输出】-5" aria-hidden="true">#</a> 【样例输出】</h3><p>4</p><p>3 4 6 7</p><h3 id="【样例说明】-3" tabindex="-1"><a class="header-anchor" href="#【样例说明】-3" aria-hidden="true">#</a> 【样例说明】</h3><p>第一行标准输入有2个正整数n和k，表示汽车加满油后可行驶n km，且旅途中有k个加油站。</p><p>第二行标准输入有k+1个整数，表示第k个加油站与第k-1个加油站之间的距离。第0个加油站表示出发地，汽车已加满油。第k+1个加油站表示目的地。</p><h3 id="思路-5" tabindex="-1"><a class="header-anchor" href="#思路-5" aria-hidden="true">#</a> 思路</h3><p>贪心，如果序列中有一个大于n了，那么说明肯定到不了，否则一定有解，因为最坏的情况就是每站都加</p><p>可以开一个变量s，记录当前已经跑了多远了，如果加上下一站还够的话，就继续跑，否则就在本站加油</p><h3 id="代码-5" tabindex="-1"><a class="header-anchor" href="#代码-5" aria-hidden="true">#</a> 代码</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 输入s，去除末尾空格</span>
s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>
n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment">## 汽车加油问题</span>
flag <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> ls<span class="token punctuation">:</span>
    <span class="token keyword">if</span> i <span class="token operator">&gt;</span> n<span class="token punctuation">:</span>
        flag <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">break</span>
<span class="token keyword">if</span> flag<span class="token punctuation">:</span>
    res <span class="token operator">=</span> <span class="token number">0</span>
    s <span class="token operator">=</span> <span class="token number">0</span>
    ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> s <span class="token operator">+</span> ls<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> n<span class="token punctuation">:</span>
            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            res <span class="token operator">+=</span> <span class="token number">1</span>
            s <span class="token operator">=</span> <span class="token number">0</span>
        s <span class="token operator">+=</span> ls<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;No Solution&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-最大团问题" tabindex="-1"><a class="header-anchor" href="#_7-最大团问题" aria-hidden="true">#</a> 7.最大团问题</h2><h3 id="【问题描述】-5" tabindex="-1"><a class="header-anchor" href="#【问题描述】-5" aria-hidden="true">#</a> 【问题描述】</h3><p>给定一个无向图G=(V,E)，若U为V子集，请对任意的顶点u, v为U的元素，有边(u,v)为E元素，则称U为G的一个完全子图。G的完全子图U是一个团，当且仅当U不包含在G的更大的完全子图中。G的最大团则指包含定点数最多的团。对给定的无向图，找出最大团中顶点的个数。</p><h3 id="【输入形式】-6" tabindex="-1"><a class="header-anchor" href="#【输入形式】-6" aria-hidden="true">#</a> 【输入形式】</h3><p>G的邻接矩阵</p><h3 id="【输出形式】-6" tabindex="-1"><a class="header-anchor" href="#【输出形式】-6" aria-hidden="true">#</a> 【输出形式】</h3><p>第一行输出最大团顶点个数，第二行输出最大团中的顶点</p><h3 id="【样例输入】-6" tabindex="-1"><a class="header-anchor" href="#【样例输入】-6" aria-hidden="true">#</a> 【样例输入】</h3><p>0,1,1,0,0</p><p>1,0,1,1,1</p><p>1,1,0,1,1</p><p>0,1,1,0,1</p><p>0,1,1,1,0</p><h3 id="【样例输出】-6" tabindex="-1"><a class="header-anchor" href="#【样例输出】-6" aria-hidden="true">#</a> 【样例输出】</h3><p>最大团顶点个数： 4</p><p>最大团为： [0, 1, 1, 1, 1]</p><h3 id="【样例说明】-4" tabindex="-1"><a class="header-anchor" href="#【样例说明】-4" aria-hidden="true">#</a> 【样例说明】</h3><p>输入的邻接矩阵表明图中有5个顶点，矩阵元素为1，则行、列对应的顶点有边相连，否则没有边相连。矩阵元素之间通过逗号隔开。举例：假设5个顶点分别为ABCDE，那么A与B、C相连。最终求得，最大团中包含4个节点，为BCDE。</p><h3 id="完全图" tabindex="-1"><a class="header-anchor" href="#完全图" aria-hidden="true">#</a> 完全图</h3>`,145),i=n("p",null,[s("任意两点都恰有一条边相连的图，n个顶点的图中有"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mfrac",null,[n("mrow",null,[n("mi",null,"n"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("mn",null,"2")])]),n("annotation",{encoding:"application/x-tex"},"\\frac{n(n-1)}{2}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.355em","vertical-align":"-0.345em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.01em"}},[n("span",{style:{top:"-2.655em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.485em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"n"),n("span",{class:"mopen mtight"},"("),n("span",{class:"mord mathnormal mtight"},"n"),n("span",{class:"mbin mtight"},"−"),n("span",{class:"mord mtight"},"1"),n("span",{class:"mclose mtight"},")")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.345em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})])])])]),s(" 条边。")],-1),l=a(`<h3 id="完全子图-团" tabindex="-1"><a class="header-anchor" href="#完全子图-团" aria-hidden="true">#</a> 完全子图(团)</h3><p>任意两点都恰好有一条边相连的子图，也叫团。</p><h3 id="思路-6" tabindex="-1"><a class="header-anchor" href="#思路-6" aria-hidden="true">#</a> 思路</h3><p>每次看当前点u如果他和最大团中的点没有边的话就不加，如果都有边的话，那么就加进去。</p><h3 id="代码-6" tabindex="-1"><a class="header-anchor" href="#代码-6" aria-hidden="true">#</a> 代码</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        graph<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>

n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## 用于存储最大团的点集</span>
ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment">## 用于存储当前团的点集</span>
st <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
res <span class="token operator">=</span> <span class="token number">1</span>


<span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> res<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> n
    <span class="token keyword">if</span> u <span class="token operator">==</span> n<span class="token punctuation">:</span>
        <span class="token keyword">if</span> num <span class="token operator">&gt;</span> res<span class="token punctuation">:</span>
            res <span class="token operator">=</span> num
            ans <span class="token operator">=</span> st<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span>
    flag <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            flag <span class="token operator">=</span> <span class="token boolean">False</span>
            <span class="token keyword">break</span>
    <span class="token keyword">if</span> flag<span class="token punctuation">:</span>
        st<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
        dfs<span class="token punctuation">(</span>u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        st<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
        dfs<span class="token punctuation">(</span>u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        dfs<span class="token punctuation">(</span>u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>


dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;最大团顶点个数： {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;最大团为： {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三组测试数据如下" tabindex="-1"><a class="header-anchor" href="#三组测试数据如下" aria-hidden="true">#</a> 三组测试数据如下</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## Test1</span>
<span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>
<span class="token comment">## Result1</span>
最大团顶点个数： <span class="token number">4</span>
最大团为： <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

<span class="token comment">## Test2</span>
<span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>
<span class="token comment">## Result2</span>
最大团顶点个数： <span class="token number">4</span>
最大团为： <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

<span class="token comment">## Test3</span>
<span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>
<span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>
<span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>
<span class="token comment">## Result3</span>
最大团顶点个数： <span class="token number">4</span>
最大团为： <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-最长公共子序列问题" tabindex="-1"><a class="header-anchor" href="#_8-最长公共子序列问题" aria-hidden="true">#</a> 8.最长公共子序列问题</h2><h3 id="【问题描述】-6" tabindex="-1"><a class="header-anchor" href="#【问题描述】-6" aria-hidden="true">#</a> 【问题描述】</h3><p>若给定序列X={x1,x2,…,xm}，则另一序列Z={z1,z2,…,zk}，是X的子序列是指存在一个严格递增下标序列{i1,i2,…,ik}使得对于所有j=1,2,…,k有：zj=xij。例如，序列Z={B，C，D，B}是序列X={A，B，C，B，D，A，B}的子序列，相应的递增下标序列为{2，3，5，7}。如果给定2个序列X和Y，当另一序列Z既是X的子序列又是Y的子序列时，称Z是序列X和Y的公共子序列。现给定2个序列X={x1,x2,…,xm}和Y={y1,y2,…,yn}，要求使用动态规划算法思想，找出X和Y的最长公共子序列。</p><h3 id="【输入形式】-7" tabindex="-1"><a class="header-anchor" href="#【输入形式】-7" aria-hidden="true">#</a> 【输入形式】</h3><p>输入以空格分割的字符，第一行对应第一条序列，第二行对应第二条序列。</p><h3 id="【输出形式】-7" tabindex="-1"><a class="header-anchor" href="#【输出形式】-7" aria-hidden="true">#</a> 【输出形式】</h3><p>字符数组形式的最长公共子序列。</p><h3 id="【样例输入】-7" tabindex="-1"><a class="header-anchor" href="#【样例输入】-7" aria-hidden="true">#</a> 【样例输入】</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>z x y
x y y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="【样例输出】-7" tabindex="-1"><a class="header-anchor" href="#【样例输出】-7" aria-hidden="true">#</a> 【样例输出】</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[&#39;x&#39;, &#39;y&#39;] 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="【样例说明】-5" tabindex="-1"><a class="header-anchor" href="#【样例说明】-5" aria-hidden="true">#</a> 【样例说明】</h3><p>第一行输入为第一条序列，包含z x y三个字符；输出为最长公共子序列，包含两个字符，以数组形式输出。</p><h3 id="思路-7" tabindex="-1"><a class="header-anchor" href="#思路-7" aria-hidden="true">#</a> 思路</h3><p>动态规划：</p><ul><li>状态表示：<code>dp[i][j]</code>表示a的[0<sub>i]和b的[0</sub>j]的最长公共子序列的长度的最大值</li><li>状态计算： <ul><li>如果a[i]==a[j],则<code>dp[i][j]=dp[i-1][j-1]+1</code></li><li>否则，<code>dp[i][j]=max(dp[i-1][j],dp[i][j-1])</code></li></ul></li></ul><h3 id="代码-7" tabindex="-1"><a class="header-anchor" href="#代码-7" aria-hidden="true">#</a> 代码</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token comment">## dp[i][j]表示a[0:i]和b[0:j]的最长公共子序列长度</span>
dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment">## a[i - 1]和b[j - 1]相等，那么dp[i][j]就是dp[i - 1][j - 1] + 1</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment">## a[i - 1]和b[j - 1]不相等，那么dp[i][j]就是dp[i - 1][j]和dp[i][j - 1]的最大值</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## 回溯  输出最长公共子序列</span>
res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
i <span class="token operator">=</span> n
j <span class="token operator">=</span> m
<span class="token keyword">while</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment">## a[i - 1]和b[j - 1]相等，那么a[i - 1]就是最长公共子序列的一个元素</span>
        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        i <span class="token operator">-=</span> <span class="token number">1</span>
        j <span class="token operator">-=</span> <span class="token number">1</span>
    <span class="token keyword">elif</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment">## a[i - 1]和b[j - 1]不相等，那么dp[i][j]就是dp[i - 1][j]和dp[i][j - 1]的最大值</span>
        i <span class="token operator">-=</span> <span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        j <span class="token operator">-=</span> <span class="token number">1</span>
res<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-棋盘覆盖问题" tabindex="-1"><a class="header-anchor" href="#_9-棋盘覆盖问题" aria-hidden="true">#</a> 9.棋盘覆盖问题</h2><h3 id="【问题描述】-7" tabindex="-1"><a class="header-anchor" href="#【问题描述】-7" aria-hidden="true">#</a> 【问题描述】</h3><p>给定一个2k×2k的棋盘(具体图例见教材)，有一个特殊棋格，拥有一个特殊棋格的棋盘称为特殊棋盘。现要用四种L型骨牌(具体图例见教材)覆盖特殊棋盘上除特殊棋格外的全部棋格，不能重叠，找出覆盖方案。</p><h3 id="【输入形式】-8" tabindex="-1"><a class="header-anchor" href="#【输入形式】-8" aria-hidden="true">#</a> 【输入形式】</h3><p>在屏幕上输入棋盘大小及特殊方格所在行号和列号</p><h3 id="【输出形式】-8" tabindex="-1"><a class="header-anchor" href="#【输出形式】-8" aria-hidden="true">#</a> 【输出形式】</h3><p>输出使用L型骨牌进行棋盘覆盖结果</p><h3 id="【样例输入】-8" tabindex="-1"><a class="header-anchor" href="#【样例输入】-8" aria-hidden="true">#</a> 【样例输入】</h3><p>2</p><p>1 2</p><h3 id="【样例输出】-8" tabindex="-1"><a class="header-anchor" href="#【样例输出】-8" aria-hidden="true">#</a> 【样例输出】</h3><p>2 -1 3 3</p><p>2 2 1 3</p><p>4 1 1 5</p><p>4 4 5 5</p><h3 id="【样例说明】-6" tabindex="-1"><a class="header-anchor" href="#【样例说明】-6" aria-hidden="true">#</a> 【样例说明】</h3><p>输入：第一行输入整数k表示棋盘大小为2的k次幂，若k为2，则棋盘大小为4行4列；第二行输入特殊方格所在的行号和列号，以空格分隔</p><p>输出：使用L型骨牌进行棋盘覆盖结果，由3个相同的数表示同一个L型骨牌，不同的骨牌用不同的数字表示。数字的大小表示棋盘覆盖的顺序。特殊方格在棋盘的第1行第2列，用-1表示。各整数间以空格分隔。</p><h3 id="思路-8" tabindex="-1"><a class="header-anchor" href="#思路-8" aria-hidden="true">#</a> 思路</h3><p>使用数学归纳法可知这个问题一定有解，因此可以将整个棋盘分为四个部分，因为有障碍物的那个部分一定是有解的，我们可以把剩下的三个棋盘每个棋盘在切开的位置都看成有障碍物，因此剩下的三个棋盘就都有解了，在3个看成障碍物的地方可以使用一个L型进行覆盖</p><h3 id="代码-8" tabindex="-1"><a class="header-anchor" href="#代码-8" aria-hidden="true">#</a> 代码</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>k <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
obstacle <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span>
board<span class="token punctuation">[</span>obstacle<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>obstacle<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token comment">## 每个放置的L都需要自己的编号</span>

cnt <span class="token operator">=</span> <span class="token number">1</span>

<span class="token keyword">def</span> <span class="token function">chessboard</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> tr<span class="token punctuation">,</span> tc<span class="token punctuation">,</span> dr<span class="token punctuation">,</span> dc<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> cnt
    <span class="token keyword">if</span> size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    s <span class="token operator">=</span> size <span class="token operator">//</span> <span class="token number">2</span>
    t <span class="token operator">=</span> cnt
    cnt <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token comment">## 覆盖左上角子棋盘</span>
    <span class="token keyword">if</span> dr <span class="token operator">&lt;</span> tr <span class="token operator">+</span> s <span class="token keyword">and</span> dc <span class="token operator">&lt;</span> tc <span class="token operator">+</span> s<span class="token punctuation">:</span>
        chessboard<span class="token punctuation">(</span>board<span class="token punctuation">,</span> tr<span class="token punctuation">,</span> tc<span class="token punctuation">,</span> dr<span class="token punctuation">,</span> dc<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        board<span class="token punctuation">[</span>tr <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tc <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t
        chessboard<span class="token punctuation">(</span>board<span class="token punctuation">,</span> tr<span class="token punctuation">,</span> tc<span class="token punctuation">,</span> tr <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tc <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
    <span class="token comment">## 覆盖右上角子棋盘</span>
    <span class="token keyword">if</span> dr <span class="token operator">&lt;</span> tr <span class="token operator">+</span> s <span class="token keyword">and</span> dc <span class="token operator">&gt;=</span> tc <span class="token operator">+</span> s<span class="token punctuation">:</span>
        chessboard<span class="token punctuation">(</span>board<span class="token punctuation">,</span> tr<span class="token punctuation">,</span> tc <span class="token operator">+</span> s<span class="token punctuation">,</span> dr<span class="token punctuation">,</span> dc<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        board<span class="token punctuation">[</span>tr <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tc <span class="token operator">+</span> s<span class="token punctuation">]</span> <span class="token operator">=</span> t
        chessboard<span class="token punctuation">(</span>board<span class="token punctuation">,</span> tr<span class="token punctuation">,</span> tc <span class="token operator">+</span> s<span class="token punctuation">,</span> tr <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tc <span class="token operator">+</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
    <span class="token comment">## 覆盖左下角子棋盘</span>
    <span class="token keyword">if</span> dr <span class="token operator">&gt;=</span> tr <span class="token operator">+</span> s <span class="token keyword">and</span> dc <span class="token operator">&lt;</span> tc <span class="token operator">+</span> s<span class="token punctuation">:</span>
        chessboard<span class="token punctuation">(</span>board<span class="token punctuation">,</span> tr <span class="token operator">+</span> s<span class="token punctuation">,</span> tc<span class="token punctuation">,</span> dr<span class="token punctuation">,</span> dc<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        board<span class="token punctuation">[</span>tr <span class="token operator">+</span> s<span class="token punctuation">]</span><span class="token punctuation">[</span>tc <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t
        chessboard<span class="token punctuation">(</span>board<span class="token punctuation">,</span> tr <span class="token operator">+</span> s<span class="token punctuation">,</span> tc<span class="token punctuation">,</span> tr <span class="token operator">+</span> s<span class="token punctuation">,</span> tc <span class="token operator">+</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
    <span class="token comment">## 覆盖右下角子棋盘</span>
    <span class="token keyword">if</span> dr <span class="token operator">&gt;=</span> tr <span class="token operator">+</span> s <span class="token keyword">and</span> dc <span class="token operator">&gt;=</span> tc <span class="token operator">+</span> s<span class="token punctuation">:</span>
        chessboard<span class="token punctuation">(</span>board<span class="token punctuation">,</span> tr <span class="token operator">+</span> s<span class="token punctuation">,</span> tc <span class="token operator">+</span> s<span class="token punctuation">,</span> dr<span class="token punctuation">,</span> dc<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        board<span class="token punctuation">[</span>tr <span class="token operator">+</span> s<span class="token punctuation">]</span><span class="token punctuation">[</span>tc <span class="token operator">+</span> s<span class="token punctuation">]</span> <span class="token operator">=</span> t
        chessboard<span class="token punctuation">(</span>board<span class="token punctuation">,</span> tr <span class="token operator">+</span> s<span class="token punctuation">,</span> tc <span class="token operator">+</span> s<span class="token punctuation">,</span> tr <span class="token operator">+</span> s<span class="token punctuation">,</span> tc <span class="token operator">+</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span>


chessboard<span class="token punctuation">(</span>board<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> obstacle<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> obstacle<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">**</span> k<span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48),u=[c,i,l];function r(k,d){return t(),e("div",null,u)}const v=p(o,[["render",r],["__file","算法分析基础上机题目.html.vue"]]);export{v as default};
