import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as r,c,b as i,d as e,e as a,a as t}from"./app-51564aae.js";const s={},p=t('<h1 id="软件工程" tabindex="-1"><a class="header-anchor" href="#软件工程" aria-hidden="true">#</a> 软件工程</h1><h2 id="考试" tabindex="-1"><a class="header-anchor" href="#考试" aria-hidden="true">#</a> 考试</h2><figure><img src="https://s2.loli.net/2023/12/25/mg7ydbSUHvAa3DW.webp" alt="117b170ad040334f07ee968176cb8c23_720" tabindex="0" loading="lazy"><figcaption>117b170ad040334f07ee968176cb8c23_720</figcaption></figure><figure><img src="https://s2.loli.net/2023/12/25/Ake5xS8BUvNYKzO.webp" alt="119b79b51818731919731e82e3c72740_720" tabindex="0" loading="lazy"><figcaption>119b79b51818731919731e82e3c72740_720</figcaption></figure><figure><img src="https://s2.loli.net/2023/12/25/ycUoYqVdM9CmSZ1.webp" alt="image-20231225105410241" tabindex="0" loading="lazy"><figcaption>image-20231225105410241</figcaption></figure><h2 id="各种图的画法" tabindex="-1"><a class="header-anchor" href="#各种图的画法" aria-hidden="true">#</a> 各种图的画法</h2><h3 id="流程图" tabindex="-1"><a class="header-anchor" href="#流程图" aria-hidden="true">#</a> 流程图</h3>',7),g={href:"https://zhuanlan.zhihu.com/p/347119698",target:"_blank",rel:"noopener noreferrer"},h=t('<p>常见的一些符号</p><figure><img src="https://pic4.zhimg.com/v2-51c2474511d797de0c16b5a3d559470b_b.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>三大结构：顺序，选择，循环</p><p>顺序：</p><figure><img src="https://pic2.zhimg.com/v2-ead8d8e97b424fe7da23a30448344139_b.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>选择：</p><figure><img src="https://pic4.zhimg.com/v2-9491d93ad8c3021f9270069d1c09fe37_b.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>循环：</p><figure><img src="https://pic1.zhimg.com/v2-a3153e0d91ea2900c1e8f09455d93a58_b.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',9),m=i("p",null,"使用markdown做图",-1),u=i("h3",{id:"e-r图",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#e-r图","aria-hidden":"true"},"#"),e(" E-R图")],-1),f={href:"https://www.zhihu.com/tardis/zm/art/270299029?source_id=1005",target:"_blank",rel:"noopener noreferrer"},b=t('<p>E-R图又称实体关系图，是一种提供了实体，属性和联系的方法，用来描述现实世界的概念模型。通俗点讲就是，当我们理解了实际问题的需求之后，需要用一种方法来表示这种需求，概念模型就是用来描述这种需求。</p><p>基本元素：</p><ol><li>实体：客观存在的并且可以相互区别的事物称为实体，如学生</li><li>属性：实体所具有的某一个特性称为属性，如姓名，班级</li><li>实体集：具有相同属性的实体的集合称为实体集，如全体学生</li><li>键：唯一标识每个实体的属性称为键，如不重复的学号</li><li>实体型：用实体名及其属性名集合来抽象和刻画同类实体称为实体型，如(学号，姓名，班级..)</li><li>联系：一对一联系，一对多联系，多对多联系</li></ol><p>E-R图的规范：</p><ul><li>矩形框：表示实体，框中记入实体名</li><li>菱形框：表示联系，在框中记入联系名</li><li>椭圆框：表示实体或联系的属性</li><li>连线：实体与属性之间；实体与联系之间；联系与属性之间用直线相连，并在直线上标注(1:1,1:n,n:m)</li></ul><p>学生管理系统 E-R图</p><figure><img src="https://s2.loli.net/2023/12/07/Rdg5YhwyS7leMOr.webp" alt="image-20231207225900143" tabindex="0" loading="lazy"><figcaption>image-20231207225900143</figcaption></figure><h3 id="数据流图" tabindex="-1"><a class="header-anchor" href="#数据流图" aria-hidden="true">#</a> 数据流图</h3>',8),v={href:"https://zhuanlan.zhihu.com/p/149291955",target:"_blank",rel:"noopener noreferrer"},_=t('<p>数据流图（DFD，Data Flow Diagram）也称分层数据流图，是在需求分析阶段用到的一种工具，在结构化的需求分析中，DFD的使用频度极高。</p><figure><img src="https://ask.qcloudimg.com/http-save/yehe-8223537/6100e576be362bb5323ec57a96d49e89.jpeg" alt="数据流图符号" tabindex="0" loading="lazy"><figcaption>数据流图符号</figcaption></figure><figure><img src="https://s2.loli.net/2023/12/07/gVZmyxDN8UMFaLP.webp" alt="image-20231207212832736" tabindex="0" loading="lazy"><figcaption>image-20231207212832736</figcaption></figure><figure><img src="https://s2.loli.net/2023/12/07/ijhv7ouEVaIBRdT.webp" alt="image-20231207213330182" tabindex="0" loading="lazy"><figcaption>image-20231207213330182</figcaption></figure><figure><img src="https://s2.loli.net/2023/12/07/DqGs4yvUBzPYcfE.webp" alt="image-20231207213125791" tabindex="0" loading="lazy"><figcaption>image-20231207213125791</figcaption></figure><figure><img src="https://s2.loli.net/2023/12/07/sR6Namu8Uwik3GO.webp" alt="image-20231207213308769" tabindex="0" loading="lazy"><figcaption>image-20231207213308769</figcaption></figure><p>画数据流图步骤：</p><ol><li>先画系统的输入和输出，构建顶层DFD</li><li>对顶层DFD图细化，构建0层DFD</li><li>逐层细化</li></ol><figure><img src="https://s2.loli.net/2023/12/07/PDInS93MyRqrEUf.webp" alt="image-20231207213842711" tabindex="0" loading="lazy"><figcaption>image-20231207213842711</figcaption></figure><p>一些注意事项：</p><ul><li>数据存储和数据流都是数据，仅仅所处的状态不同。数据存储是处于静止状态的数据，数据流是处于运动中的数据。</li><li>每个加工至少有一个输入数据流和一个输出数据流，反映出此加工数据的来源与加工的结果。</li></ul><p>数据流图分层：</p><figure><img src="https://s2.loli.net/2023/12/07/UXyzMI6TQraukDh.webp" alt="image-20231207210451214" tabindex="0" loading="lazy"><figcaption>image-20231207210451214</figcaption></figure><p>数据流图分层 , 最上层是 顶层数据流图 , 第二层是 0 层数据流图 , ⋯ , 最底层是 底层数据流图</p><h4 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h4>',15),x={href:"https://blog.csdn.net/weixin_44949135/article/details/111771085",target:"_blank",rel:"noopener noreferrer"},z=i("p",null,"高考录取统分子系统有如下功能：",-1),B=i("p",null,"(1) 计算标准分：根据考生原始分计算，得到标准分，存入考生分数文件；",-1),E=i("p",null,"(2) 计算录取线分：根据标准分、招生计划文件中的招生人数，计算录取线，存入录取线。",-1),y=i("p",null,[e("要求：用结构化方法学对高考录取统分子系统进行分析与设计，分别完成以下工作："),i("br"),e(" ① 给出高考录取统分子系统的功能模型（用数据流图表示）。② 给出高考录取统分子系统的软件体系结构（用模块结构图表示）。")],-1),w=i("figure",null,[i("img",{src:"https://s2.loli.net/2023/12/07/ebcaW4p6tTqyORP.webp",alt:"image-20231207222507274",tabindex:"0",loading:"lazy"}),i("figcaption",null,"image-20231207222507274")],-1),A=i("figure",null,[i("img",{src:"https://s2.loli.net/2023/12/07/xwE4OXMCK9VnZsp.webp",alt:"image-20231207222855164",tabindex:"0",loading:"lazy"}),i("figcaption",null,"image-20231207222855164")],-1),k=i("h3",{id:"软件结构图",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#软件结构图","aria-hidden":"true"},"#"),e(" 软件结构图")],-1),M={href:"https://blog.csdn.net/weixin_44611096/article/details/111311549",target:"_blank",rel:"noopener noreferrer"},D=i("p",null,"结构图（Structure Chart，简称SC图）是精确表达软件结构的图形表示方法，它以特定的符号表示模块、模块间的调用关系和模块间信息的传递。",-1),U=i("figure",null,[i("img",{src:"https://s2.loli.net/2023/12/07/9NDg5zGFvbitoEY.webp",alt:"image-20231207224052079",tabindex:"0",loading:"lazy"}),i("figcaption",null,"image-20231207224052079")],-1),j=i("p",null,"将上面的数据流图转为如下的软件结构图，下图：数据传输应该用小圆圈，箭头方向反了",-1),S=i("figure",null,[i("img",{src:"https://s2.loli.net/2023/12/07/xwE4OXMCK9VnZsp.webp",alt:"image-20231207222855164",tabindex:"0",loading:"lazy"}),i("figcaption",null,"image-20231207222855164")],-1),J=i("h3",{id:"uml图",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#uml图","aria-hidden":"true"},"#"),e(" UML图")],-1),L={href:"https://zhuanlan.zhihu.com/p/109655171",target:"_blank",rel:"noopener noreferrer"},I=t(`<p>UML——Unified modeling language UML(统一建模语言)，是一种用于软件系统分析和设计的语言工具，它用于帮助软件开发人员进行思考和记录思路的结果</p><h4 id="类的表示" tabindex="-1"><a class="header-anchor" href="#类的表示" aria-hidden="true">#</a> 类的表示</h4><p>类在类图中用矩形框表示，矩形框分为三层：第一层是类名字。第二层是类的成员变量；第三层是类的方法。成员变量以及方法前的访问修饰符用符号来表示：</p><ul><li>“+”表示 <code>public</code>；</li><li>“-”表示 <code>private</code>；</li><li>“#”表示 <code>protected</code>；</li><li>不带符号表示 <code>default</code>。</li></ul><figure><img src="https://pic4.zhimg.com/v2-71b22158f5b09dffa57a123d72ec4653_b.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="抽象类" tabindex="-1"><a class="header-anchor" href="#抽象类" aria-hidden="true">#</a> 抽象类</h4><p>抽象类在UML类图中同样用矩形框表示，但是抽象类的类名以及抽象方法的名字都用斜体字表示</p><figure><img src="https://pic2.zhimg.com/v2-5c69cd9ff703377f7bbf37cee8199451_b.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h4><p>接口在类图中的第一层顶端用构造型 <code>&lt;&lt;interface&gt;&gt;</code>表示，下面是接口的名字，第二层是方法</p><figure><img src="https://pic3.zhimg.com/v2-b421c9c15219feba7dd9cf7681070682_b.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="关系" tabindex="-1"><a class="header-anchor" href="#关系" aria-hidden="true">#</a> 关系</h4><p>关系共有六种类型，分别是实现关系、泛化关系、关联关系、依赖关系、聚合关系、组合关系</p><h5 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h5><p>实现关系是指接口及其实现类之间的关系。在UML类图中，实现关系用空心三角和虚线组成的箭头来表示，从实现类指向接口。</p><figure><img src="https://pic1.zhimg.com/v2-616c153ec74d496a811ac50c83c3653c_b.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h5 id="泛化" tabindex="-1"><a class="header-anchor" href="#泛化" aria-hidden="true">#</a> 泛化</h5><p>泛化关系（Generalization）是指对象与对象之间的继承关系。如果对象A和对象B之间的“is a”关系成立，那么二者之间就存在继承关系，对象B是父对象，对象A是子对象。例如，一个年薪制员工“is a”员工，很显然年薪制员工Salary对象和员工Employee对象之间存在继承关系，Employee对象是父对象，Salary对象是子对象。</p><p>在UML类图中，泛化关系用空心三角和实线组成的箭头表示，从子类指向父类，如图8所示。在Java代码中，对象之间的泛化关系可以直接翻译为关键字 <code>extends</code>。</p><figure><img src="https://pic4.zhimg.com/v2-04064db11797cf36229d67407fea1b83_b.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h5 id="关联" tabindex="-1"><a class="header-anchor" href="#关联" aria-hidden="true">#</a> 关联</h5><p>关联关系（Association）是指对象和对象之间的连接，它使一个对象知道另一个对象的属性和方法。在Java中，关联关系的代码表现形式为一个对象含有另一个对象的引用。也就是说，如果一个对象的类代码中，包含有另一个对象的引用，那么这两个对象之间就是关联关系。</p><p>关联关系有单向关联和双向关联。如果两个对象都知道（即可以调用）对方的公共属性和操作，那么二者就是双向关联。如果只有一个对象知道（即可以调用）另一个对象的公共属性和操作，那么就是单向关联。大多数关联都是单向关联，单向关联关系更容易建立和维护，有助于寻找可重用的类。</p><p>在UML图中，双向关联关系用带双箭头的实线或者无箭头的实线双线表示。单向关联用一个带箭头的实线表示，箭头指向被关联的对象，如图9所示。这就是导航性（Navigatity）。</p><figure><img src="https://pic4.zhimg.com/v2-3f331f3dc075abb4215413014688638f_b.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>一个对象可以持有其它对象的数组或者集合。在UML中，通过放置多重性（multipicity）表达式在关联线的末端来表示。多重性表达式可以是一个数字、一段范围或者是它们的组合。多重性允许的表达式示例如下：</p><ul><li>数字：精确的数量</li><li><code>*</code>或者<code>0..*</code>：表示0到多个</li><li><code>0..1</code>：表示0或者1个，在Java中经常用一个空引用来实现</li><li><code>1..*</code>：表示1到多个</li></ul><p>关联关系又分为依赖关联、聚合关联和组合关联三种类型。</p><h5 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h5><p>依赖（Dependency）关系是一种弱关联关系。如果对象A用到对象B，但是和B的关系不是太明显的时候，就可以把这种关系看作是依赖关系。如果对象A依赖于对象B，则 A “use a” B。比如驾驶员和汽车的关系，驾驶员使用汽车，二者之间就是依赖关系。</p><p>在UML类图中，依赖关系用一个带虚线的箭头表示，由使用方指向被使用方，表示使用方对象持有被使用方对象的引用，如图10所示。</p><figure><img src="https://pic1.zhimg.com/v2-431e044bbf26778a20dd788968e22aac_b.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>依赖关系在Java中的具体代码表现形式为<strong>B为A的构造器</strong>或<strong>方法中的局部变量</strong>、<strong>方法或构造器的参数</strong>、<strong>方法的返回值</strong>，或者<strong>A调用B的静态方法</strong>。</p><p>下面我们用代码清单1和代码清单2所示的Java代码来演示对象和对象之间的依赖关系。</p><p>代码清单1所示的<code>B</code>类定义了一个成员变量 <code>field1</code>，一个普通方法 <code>method1()</code> 和一个静态方法 <code>method2()</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//代码清单1 B.java
public class B {
  public String field1;   //成员变量

  public void method1() {
    System.println(&quot;在类B的方法1中&quot;);
  }

  public static void method2() {                 //静态方法
    System.out.println(&quot;在类B的静态方法2中&quot;);
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码清单2所示的<code>A</code>类依赖于<code>B</code>类，在<code>A</code>类中定义了四个方法，分别演示四种依赖形式。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/* 代码清单2 A.java
  A依赖于B
*/

public class A {
  public void method1() {
    //A依赖于B的第一种表现形式：B为A的局部变量
    B b = new B();
    b.method1();
  }

  public void method2() {
    //A依赖于B的第二种表现形式： 调用B的静态方法
    B.method2();
  }

  public void method3(B b)  {
    //A依赖于B的第三种表现形式：B作为A的方法参数
    String s = b.field1;
  }

  //A依赖于B的第四种表现形式：B作为A的方法的返回值
  public B method4() {
    return new B();
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="聚合与组合" tabindex="-1"><a class="header-anchor" href="#聚合与组合" aria-hidden="true">#</a> 聚合与组合</h5><p>聚合（Aggregation）是关联关系的一种特例，它体现的是整体与部分的拥有关系，即 “has a” 的关系。此时整体与部分之间是可分离的，它们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享，所以聚合关系也常称为共享关系。例如，公司部门与员工的关系，一个员工可以属于多个部门，一个部门撤消了，员工可以转到其它部门。</p><p>在UML图中，聚合关系用空心菱形加实线箭头表示，空心菱形在整体一方，箭头指向部分一方，如图11所示。</p><figure><img src="https://pic4.zhimg.com/v2-82cb160ed1566d1d04ea320575b54d5f_b.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>组合（Composition）也是关联关系的一种特例，它同样体现整体与部分间的包含关系，即 “contains a” 的关系。但此时整体与部分是不可分的，部分也不能给其它整体共享，作为整体的对象负责部分的对象的生命周期。这种关系比聚合更强，也称为强聚合。如果<code>A</code>组合<code>B</code>，则<code>A</code>需要知道<code>B</code>的生存周期，即可能<code>A</code>负责生成或者释放<code>B</code>，或者<code>A</code>通过某种途径知道<code>B</code>的生成和释放。</p><p>例如，人包含头、躯干、四肢，它们的生命周期一致。当人出生时，头、躯干、四肢同时诞生。当人死亡时，作为人体组成部分的头、躯干、四肢同时死亡。</p><p>在UML图中，组合关系用实心菱形加实线箭头表示，实心菱形在整体一方，箭头指向部分一方，如图12所示。</p><figure><img src="https://pic1.zhimg.com/v2-e651244eeca9c0881cbdd2add429e850_b.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在Java代码形式上，聚合和组合关系中的部分对象是整体对象的一个成员变量。但是，在实际应用开发时，两个对象之间的关系到底是聚合还是组合，有时候很难区别。在Java中，仅从类代码本身是区分不了聚合和组合的。如果一定要区分，那么如果在删除整体对象的时候，必须删掉部分对象，那么就是组合关系，否则可能就是聚合关系。从业务角度上来看，如果作为整体的对象必须要部分对象的参与，才能完成自己的职责，那么二者之间就是组合关系，否则就是聚合关系。</p><p>例如，汽车与轮胎，汽车作为整体，轮胎作为部分。如果用在二手车销售业务环境下，二者之间就是聚合关系。因为轮胎作为汽车的一个组成部分，它和汽车可以分别生产以后装配起来使用，但汽车可以换新轮胎，轮胎也可以卸下来给其它汽车使用。如果用在驾驶系统业务环境上，汽车如果没有轮胎，就无法完成行驶任务，二者之间就是一个组合关系。再比如网上书店业务中的订单和订单项之间的关系，如果订单没有订单项，也就无法完成订单的业务，所以二者之间是组合关系。而购物车和商品之间的关系，因为商品的生命周期并不被购物车控制，商品可以被多个购物车共享，因此，二者之间是聚合关系。</p><h2 id="一些概念" tabindex="-1"><a class="header-anchor" href="#一些概念" aria-hidden="true">#</a> 一些概念</h2><h3 id="数据字典" tabindex="-1"><a class="header-anchor" href="#数据字典" aria-hidden="true">#</a> 数据字典</h3><p>数据流箭头上只标明了 “账号信息” , 没有具体的格式内容 , 是只有账号 , 还是有账号/密码/验证码等信息 , 这些数据详细格式 , 都在 数据字典中定义 ;</p>`,51),R={href:"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E9%A1%B9/3227309?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"},K={href:"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1450?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"},F={href:"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%B5%81/3002243?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"},W={href:"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/9827490?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE/4136477?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"},N={href:"https://baike.baidu.com/item/%E6%8F%8F%E8%BF%B0%E6%95%B0%E6%8D%AE/5133915?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"},V={href:"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0/715313?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"};function C(P,q){const n=d("ExternalLinkIcon"),l=d("Mermaid");return r(),c("div",null,[p,i("p",null,[e("链接："),i("a",g,[e("https://zhuanlan.zhihu.com/p/347119698"),a(n)])]),h,a(l,{id:"mermaid-51",code:"eJxlzL8KgkAcwPHdp7jRBp8gCPK/zW3i0FRjNDvUEJghHhy1lRWVNJROCV30Nr/Tx8i7cnL98uE7no2mEzTUuxJCfRfec0jXHlKUnl99CCwvcL9CXPhIldmKQJSzGJfnV6fWKldIk6uMQrz9Od410fWW10U3Gp8SwBHvhuhmy5uiW3/PAlzSG++W6LYMpz2Eh+pxZJucd1t0p/kEGMKEFbQ27BmwRcaNI8zALSlhu8STvuohdOE="}),m,a(l,{id:"mermaid-55",code:"eJxNzj1PwlAUBuC9v+KM16EJzooJpXw5uxEGY4y2IX4QGUw6YBjEjwKROmIVFY2JbSdMwPbX9Jzbn+G9V0IYznLe5z05R639s2PYM7c0gEIdfzv4cdcAXd9xsiDhcWDlcw4YDJMv3g9p/JIuZvTaIf99QxQMBS3YhoPT9skF6LDpQJH9N+18TpqiMva6EWM5YDIKvSzp4vcUBz+SmoqKEyWWzt/InYiIe34au+KcBCUJoMxw8oS3z7ZcldXKXLVxOHWgshSWFBUljNW7SlQZ3YzQjaj/gPMBBvfUG9KsR1ehrFRVpcayqMu9z/P2Yeuy0GzidUyPkcxrKt+t88WIxn5D0/4AxT+IKw=="}),u,i("p",null,[i("a",f,[e("https://www.zhihu.com/tardis/zm/art/270299029?source_id=1005"),a(n)])]),b,i("p",null,[i("a",v,[e("https://zhuanlan.zhihu.com/p/149291955"),a(n)])]),_,i("blockquote",null,[i("p",null,[i("a",x,[e("https://blog.csdn.net/weixin_44949135/article/details/111771085"),a(n)])]),z,B,E,y]),w,A,k,i("p",null,[i("a",M,[e("https://blog.csdn.net/weixin_44611096/article/details/111311549"),a(n)])]),D,U,j,S,J,i("blockquote",null,[i("p",null,[e("以下内容转载："),i("a",L,[e("https://zhuanlan.zhihu.com/p/109655171"),a(n)])])]),I,i("p",null,[e("数据字典是指对数据的"),i("a",R,[e("数据项"),a(n)]),e("、"),i("a",K,[e("数据结构"),a(n)]),e("、"),i("a",F,[e("数据流"),a(n)]),e("、"),i("a",W,[e("数据存储"),a(n)]),e("、处理逻辑等进行定义和描述，其目的是对"),i("a",Y,[e("数据流图"),a(n)]),e("中的各个元素作出详细的说明，使用数据字典为简单的建模项目。简而言之，数据字典是"),i("a",N,[e("描述数据"),a(n)]),e("的信息集合，是对系统中使用的所有"),i("a",V,[e("数据元素"),a(n)]),e("的定义的集合。")])])}const T=o(s,[["render",C],["__file","软件工程.html.vue"]]);export{T as default};
