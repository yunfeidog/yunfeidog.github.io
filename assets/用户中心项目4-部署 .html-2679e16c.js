import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as e,a as s}from"./app-51564aae.js";const i={},l=s(`<h1 id="用户中心" tabindex="-1"><a class="header-anchor" href="#用户中心" aria-hidden="true">#</a> 用户中心</h1><h2 id="多环境" tabindex="-1"><a class="header-anchor" href="#多环境" aria-hidden="true">#</a> 多环境</h2><p>本地开发：<code>localhost{127.0.0.1}</code></p><p>多环境：同一套项目代码在不同的阶段需要根据实际情况 来调整配置 并且数部署 到不同的机器上</p><p>为什么需要？</p><ol><li>每个环境互不影响</li><li>为了区分不同的阶段：开发/测试</li><li>对项目进行优化： <ol><li>本地日志</li><li>精简依赖，节省项目体积，</li><li>参数调整，比如JVM参数</li></ol></li></ol><p>多环境 分类：</p><ol><li>本地环境（自己的电脑）localhost</li><li>开发环境（远程开发）连同一台机器</li><li>测试环境 开发/测试/产品 ，性能测试/单元测试/功能测试/系统集成测试，独立的数据库/独立的服务器</li><li>预发布环境，和正式环境 一致，正式数据库</li><li>正式环境，保证代码是“完美的”</li><li>沙箱环境：为了做实验</li></ol><h3 id="前端多环境" tabindex="-1"><a class="header-anchor" href="#前端多环境" aria-hidden="true">#</a> 前端多环境</h3><p>用了umi框架，build的时候 会自动传入<code>NODE_ENV==production</code>参数 ，</p><p>启动方式：</p><ul><li>开发环境：<code>npm run start</code></li><li>线上环境：<code>npm run build</code> 项目构建打包，可以使用serve服务器</li></ul><p>在自己的请求里面添加请求前缀，如果是production环境，就用服务器url</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  credentials<span class="token operator">:</span> <span class="token string">&#39;include&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 默认请求是否带上cookie</span>
  prefix<span class="token operator">:</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token operator">===</span><span class="token string">&#39;production&#39;</span><span class="token operator">?</span><span class="token string">&#39;your real url&#39;</span><span class="token operator">:</span><span class="token keyword">undefined</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目的配置</p><p>不同的项目框架都有不同的配置文件，umi的配置文件是config，可以在配置文件后添加对应的环境名称后缀来区分开发环境和生产环境</p><p>开发环境：config.dev.ts</p><p>生产环境：config.prod.ts</p><p>公共配置：config.ts</p><h3 id="后端多环境" tabindex="-1"><a class="header-anchor" href="#后端多环境" aria-hidden="true">#</a> 后端多环境</h3><p>新建一个application-prod.yml文件，里面配置自己服务器的信息</p><p>连接服务器的时候遇到下面这个报错，可以在url里面添加 <code>useSSL=false</code></p><figure><img src="https://s2.loli.net/2023/10/19/iZY79chNpDndjSE.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>将写好的代码打包为jar包</p><figure><img src="https://s2.loli.net/2023/10/19/hFRTeU4O3dz5wA6.webp" alt="image-20231019122008450" tabindex="0" loading="lazy"><figcaption>image-20231019122008450</figcaption></figure><p>可以在启动时启动环境变量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> usercenter-back-0.0.1.jar <span class="token parameter variable">--spring.profiles.active</span><span class="token operator">=</span>prod
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="部署" tabindex="-1"><a class="header-anchor" href="#部署" aria-hidden="true">#</a> 部署</h2><p>什么都需要 自己装</p><h3 id="前端" tabindex="-1"><a class="header-anchor" href="#前端" aria-hidden="true">#</a> 前端</h3><p>需要web服务器 ：nginx，apache，tomcat</p><h4 id="安装nginx服务器" tabindex="-1"><a class="header-anchor" href="#安装nginx服务器" aria-hidden="true">#</a> 安装nginx服务器</h4><p>下载源码到服务器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-o</span> nginx-1.21.6.tar.gz http://nginx.org/download/nginx-1.21.6.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解压：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> nginx-1.21.6.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入文件夹</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> nginx-1.21.6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装依赖：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> pcre pcre-devel <span class="token parameter variable">-y</span>
yum <span class="token function">install</span> openssl openssl-devel <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./configure --with-http_ssl_module --with-http_v2_module --with-stream
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看是否安装好</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span> /usr/local/nginx/sbin/nginx 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置环境变量：</p><p>Vim /etc/profile</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/nginx/sbin	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动nginx</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看运行 情况</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">netstat</span> <span class="token parameter variable">-ntlp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重新加载：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nginx <span class="token parameter variable">-s</span> reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>停止</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nginx <span class="token parameter variable">-s</span> stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>nginx配置文件目录在<code>/usr/local/nginx/conf</code></p><p>查看端口占用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">netstat</span> <span class="token parameter variable">-ntlp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><p>上传文件解压：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">unzip</span> dist.zip 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我的html页面在<code>/root/services/dist</code>文件夹下面</p><p>修改nginx配置文件：</p><figure><img src="https://s2.loli.net/2023/10/19/18QRfPGeivAdMH2.webp" alt="image-20231019135144672" tabindex="0" loading="lazy"><figcaption>image-20231019135144672</figcaption></figure><p>查看nginx进程</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span><span class="token function">grep</span>  <span class="token string">&#39;nginx&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://s2.loli.net/2023/10/19/zTwCN6SxUJe2umo.webp" alt="image-20231019135307293" tabindex="0" loading="lazy"><figcaption>image-20231019135307293</figcaption></figure><p>此时发现nginx进程的启动者是nobody，需要修改为root,否则没有权限访问文件夹</p><figure><img src="https://s2.loli.net/2023/10/19/tZLndxU7jVT4OD1.webp" alt="image-20231019135510365" tabindex="0" loading="lazy"><figcaption>image-20231019135510365</figcaption></figure><p>重新加载 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nginx <span class="token parameter variable">-s</span> reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>部署 成功：</p><figure><img src="https://s2.loli.net/2023/10/19/QsVYUh3EdOmakCn.webp" alt="image-20231019135604398" tabindex="0" loading="lazy"><figcaption>image-20231019135604398</figcaption></figure><h3 id="后端" tabindex="-1"><a class="header-anchor" href="#后端" aria-hidden="true">#</a> 后端</h3><p>安装Java</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> java-1.8.0-openjdk*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将构建好的jar包上传到服务器</p><p>使用下面命令运行代码</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java  -jar +文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://s2.loli.net/2023/10/19/JDHjuPLhZY6XMOV.webp" alt="image-20231019142906176" tabindex="0" loading="lazy"><figcaption>image-20231019142906176</figcaption></figure><p>但是这样不是在后台运行，修改命令如下：</p><p>让进程在后台运行</p><div class="language-bash&#39; line-numbers-mode" data-ext="bash&#39;"><pre class="language-bash&#39;"><code>nohup java -jar usercenter-back-0.0.1.jar  &amp;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入jobs查看状态</p><p>或者使用 <code>netstat -ntlp</code>查看</p><figure><img src="https://s2.loli.net/2023/10/19/4R7HImMZzdXWC1y.webp" alt="image-20231019143124896" tabindex="0" loading="lazy"><figcaption>image-20231019143124896</figcaption></figure><h2 id="宝塔部署" tabindex="-1"><a class="header-anchor" href="#宝塔部署" aria-hidden="true">#</a> 宝塔部署</h2><p>先安装宝塔面板</p><p>登录宝塔后进入软件商店，安装tomcat和nginx</p><figure><img src="https://s2.loli.net/2023/10/19/9tWswLbjrgAIPxV.webp" alt="image-20231019145730138" tabindex="0" loading="lazy"><figcaption>image-20231019145730138</figcaption></figure><p>后端：</p><figure><img src="https://s2.loli.net/2023/10/19/dGF3IPkHKWQmOfE.webp" alt="image-20231019151456187" tabindex="0" loading="lazy"><figcaption>image-20231019151456187</figcaption></figure><h2 id="docker部署" tabindex="-1"><a class="header-anchor" href="#docker部署" aria-hidden="true">#</a> Docker部署</h2><p>可以将环境 代码一起打包为镜像</p><p>Dockerfile 编写：</p><ul><li>FROM 依赖的基础镜像</li><li>WORKDIR 工作目录</li><li>COPY 从本机复制文件</li><li>RUN 执行命令</li><li>CMD / ENTRYPOINT（附加额外参数）指定运行容器时默认执行的命令</li></ul><h3 id="前端-1" tabindex="-1"><a class="header-anchor" href="#前端-1" aria-hidden="true">#</a> 前端</h3><p>下面无需改动</p><p>Dockerfile</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> nginx</span>

<span class="token instruction"><span class="token keyword">WORKDIR</span> /usr/share/nginx/html/</span>
<span class="token instruction"><span class="token keyword">USER</span> root</span>

<span class="token instruction"><span class="token keyword">COPY</span> ./docker/nginx.conf /etc/nginx/conf.d/default.conf</span>

<span class="token instruction"><span class="token keyword">COPY</span> ./dist  /usr/share/nginx/html/</span>

<span class="token instruction"><span class="token keyword">EXPOSE</span> 80</span>

<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;nginx&quot;</span>, <span class="token string">&quot;-g&quot;</span>, <span class="token string">&quot;daemon off;&quot;</span>]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>docker/nginx.conf</p><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code>server {
    listen 80;

    # gzip config
    gzip on;
    gzip_min_length 1k;
    gzip_comp_level 9;
    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;
    gzip_vary on;
    gzip_disable &quot;MSIE [1-6]\\.&quot;;

    root /usr/share/nginx/html;
    include /etc/nginx/mime.types;

    location / {
        try_files $uri /index.html;
    }

}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后端Dockerfile</p><p>需要改一下启动参数</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> maven:3.5-jdk-8-alpine <span class="token keyword">as</span> builder</span>

<span class="token comment"># Copy local code to the contaier image</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token instruction"><span class="token keyword">COPY</span> pom.xml .</span>
<span class="token instruction"><span class="token keyword">COPY</span> src ./src</span>

<span class="token comment"># Build a release artifact</span>
<span class="token instruction"><span class="token keyword">RUN</span> mvn package -DskipTests</span>

<span class="token comment"># Run the web service on container startup</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;-jar&quot;</span>, <span class="token string">&quot;/app/target/usercenter-back-0.0.1.jar&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 Dockerfile 构建镜像：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 后端
docker build -t user-center-backend:v0.0.1 .

# 前端
docker build -t user-center-frontend:v0.0.1 .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用如下命令查看镜像</p><figure><img src="https://s2.loli.net/2023/10/19/2CBJfOXcvMlEALU.webp" alt="image-20231019155408595" tabindex="0" loading="lazy"><figcaption>image-20231019155408595</figcaption></figure><p>关闭占用80和8080端口的进程</p><figure><img src="https://s2.loli.net/2023/10/19/DoIHZTQ6jOgPbWV.webp" alt="image-20231019180432048" tabindex="0" loading="lazy"><figcaption>image-20231019180432048</figcaption></figure><p>启动：</p><p>docker run 启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 前端</span>
<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-d</span> user-center-frontend:v0.0.1 

<span class="token comment"># 后端</span>
<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 user-center-backend:v0.0.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span>  fee2bbb7c9ee /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看进程</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看日志</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> <span class="token punctuation">[</span>container-id<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>杀死容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">kill</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>强制删除镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi <span class="token parameter variable">-f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>成功部署，并且接通后端</p><figure><img src="https://s2.loli.net/2023/10/19/YhEnU5dJ6qsWQlk.webp" alt="image-20231019193050853" tabindex="0" loading="lazy"><figcaption>image-20231019193050853</figcaption></figure><figure><img src="https://s2.loli.net/2023/10/19/JX5KWkx21Hb6lcE.webp" alt="image-20231019193338517" tabindex="0" loading="lazy"><figcaption>image-20231019193338517</figcaption></figure>`,129),d=[l];function r(t,c){return n(),e("div",null,d)}const u=a(i,[["render",r],["__file","用户中心项目4-部署 .html.vue"]]);export{u as default};
