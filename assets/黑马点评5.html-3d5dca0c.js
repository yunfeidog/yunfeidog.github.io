const n=JSON.parse('{"key":"v-f1bc3578","path":"/project/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%845.html","title":"黑马点评5","lang":"zh-CN","frontmatter":{"title":"黑马点评5","date":"2023-11-05T00:00:00.000Z","category":["项目实战","黑马点评"],"tag":["项目实战","黑马点评"],"description":"黑马点评5 秒杀优化 用户模拟 模拟1000个用户同时发送请求，也就是需要使用jmeter进行压力测试，需要编写代码获取1000个用户的token 生成1000个登录用户并生成token @SpringBootTest class HmDianPingApplicationTests { @Resource private StringRedisTemplate stringRedisTemplate; @Resource private IUserService userService; @Test @Transactional public void insertUser() { final String filePath = \\"src/main/resources/user.txt\\"; final int count = 1000; BufferedWriter writer; try { writer = new BufferedWriter(new FileWriter(filePath)); for (int i = 0; i &lt; count; i++) { String phone = \\"13\\" + RandomUtil.randomNumbers(9); String token = this.login(phone); writer.write(token); writer.newLine(); } writer.close(); } catch (IOException e) { throw new RuntimeException(e); } finally { System.out.println(\\"生成用户token完毕\\"); } } public String login(String phone) { User user = new User(); user.setPhone(phone); user.setNickName(USER_NICK_NAME_PREFIX + RandomUtil.randomString(10)); userService.save(user); //生成token String token = UUID.randomUUID().toString(); //将User对象转为HashMap存储 UserDTO userDTO = BeanUtil.copyProperties(user, UserDTO.class); Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDTO, new HashMap&lt;&gt;(), CopyOptions.create() .setIgnoreNullValue(true) .setFieldValueEditor((fieldName, fieldvalue) -&gt; fieldvalue.toString()) ); //存储 String tokenKey = LOGIN_USER_KEY + token; stringRedisTemplate.opsForHash().putAll(tokenKey, userMap); //设置有效期 stringRedisTemplate.expire(tokenKey, LOGIN_USER_TTL, TimeUnit.MINUTES); return token; } }","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/project/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%845.html"}],["meta",{"property":"og:site_name","content":"全民制作人ikun"}],["meta",{"property":"og:title","content":"黑马点评5"}],["meta",{"property":"og:description","content":"黑马点评5 秒杀优化 用户模拟 模拟1000个用户同时发送请求，也就是需要使用jmeter进行压力测试，需要编写代码获取1000个用户的token 生成1000个登录用户并生成token @SpringBootTest class HmDianPingApplicationTests { @Resource private StringRedisTemplate stringRedisTemplate; @Resource private IUserService userService; @Test @Transactional public void insertUser() { final String filePath = \\"src/main/resources/user.txt\\"; final int count = 1000; BufferedWriter writer; try { writer = new BufferedWriter(new FileWriter(filePath)); for (int i = 0; i &lt; count; i++) { String phone = \\"13\\" + RandomUtil.randomNumbers(9); String token = this.login(phone); writer.write(token); writer.newLine(); } writer.close(); } catch (IOException e) { throw new RuntimeException(e); } finally { System.out.println(\\"生成用户token完毕\\"); } } public String login(String phone) { User user = new User(); user.setPhone(phone); user.setNickName(USER_NICK_NAME_PREFIX + RandomUtil.randomString(10)); userService.save(user); //生成token String token = UUID.randomUUID().toString(); //将User对象转为HashMap存储 UserDTO userDTO = BeanUtil.copyProperties(user, UserDTO.class); Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDTO, new HashMap&lt;&gt;(), CopyOptions.create() .setIgnoreNullValue(true) .setFieldValueEditor((fieldName, fieldvalue) -&gt; fieldvalue.toString()) ); //存储 String tokenKey = LOGIN_USER_KEY + token; stringRedisTemplate.opsForHash().putAll(tokenKey, userMap); //设置有效期 stringRedisTemplate.expire(tokenKey, LOGIN_USER_TTL, TimeUnit.MINUTES); return token; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-28T07:33:06.000Z"}],["meta",{"property":"article:author","content":"全民制作人ikun"}],["meta",{"property":"article:tag","content":"项目实战"}],["meta",{"property":"article:tag","content":"黑马点评"}],["meta",{"property":"article:published_time","content":"2023-11-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-28T07:33:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"黑马点评5\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-28T07:33:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全民制作人ikun\\",\\"url\\":\\"https://github.com/yunfeidog\\"}]}"]]},"headers":[{"level":2,"title":"秒杀优化","slug":"秒杀优化","link":"#秒杀优化","children":[{"level":3,"title":"用户模拟","slug":"用户模拟","link":"#用户模拟","children":[]},{"level":3,"title":"Redis优化秒杀","slug":"redis优化秒杀","link":"#redis优化秒杀","children":[]},{"level":3,"title":"使用阻塞队列优化秒杀","slug":"使用阻塞队列优化秒杀","link":"#使用阻塞队列优化秒杀","children":[]},{"level":3,"title":"使用Redis消息队列","slug":"使用redis消息队列","link":"#使用redis消息队列","children":[]},{"level":3,"title":"使用Stream","slug":"使用stream","link":"#使用stream","children":[]}]}],"git":{"createdTime":1699536223000,"updatedTime":1714289586000,"contributors":[{"name":"yunfeidog","email":"1844025705@qq.com","commits":2}]},"readingTime":{"minutes":9.25,"words":2775},"filePathRelative":"project/黑马点评/黑马点评5.md","localizedDate":"2023年11月5日","excerpt":"<h1> 黑马点评5</h1>\\n<h2> 秒杀优化</h2>\\n<h3> 用户模拟</h3>\\n<p>模拟1000个用户同时发送请求，也就是需要使用jmeter进行压力测试，需要编写代码获取1000个用户的token</p>\\n<p>生成1000个登录用户并生成token</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code>\\n<span class=\\"token annotation punctuation\\">@SpringBootTest</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">HmDianPingApplicationTests</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Resource</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">StringRedisTemplate</span> stringRedisTemplate<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Resource</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">IUserService</span> userService<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Test</span>\\n    <span class=\\"token annotation punctuation\\">@Transactional</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">insertUser</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">String</span> filePath <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"src/main/resources/user.txt\\"</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">int</span> count <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">BufferedWriter</span> writer<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n            writer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">BufferedWriter</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">FileWriter</span><span class=\\"token punctuation\\">(</span>filePath<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> count<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token class-name\\">String</span> phone <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"13\\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token class-name\\">RandomUtil</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">randomNumbers</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">9</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\">String</span> token <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">login</span><span class=\\"token punctuation\\">(</span>phone<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                writer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span>token<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                writer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            writer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">IOException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">RuntimeException</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">finally</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"生成用户token完毕\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">login</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> phone<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">User</span> user <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">User</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        user<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setPhone</span><span class=\\"token punctuation\\">(</span>phone<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        user<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setNickName</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">USER_NICK_NAME_PREFIX</span> <span class=\\"token operator\\">+</span> <span class=\\"token class-name\\">RandomUtil</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">randomString</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        userService<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">save</span><span class=\\"token punctuation\\">(</span>user<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//生成token</span>\\n        <span class=\\"token class-name\\">String</span> token <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">UUID</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">randomUUID</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//将User对象转为HashMap存储</span>\\n        <span class=\\"token class-name\\">UserDTO</span> userDTO <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">BeanUtil</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">copyProperties</span><span class=\\"token punctuation\\">(</span>user<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">UserDTO</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Map</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span> userMap <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">BeanUtil</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">beanToMap</span><span class=\\"token punctuation\\">(</span>userDTO<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HashMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n                <span class=\\"token class-name\\">CopyOptions</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n                        <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setIgnoreNullValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span>\\n                        <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setFieldValueEditor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>fieldName<span class=\\"token punctuation\\">,</span> fieldvalue<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> fieldvalue<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//存储</span>\\n        <span class=\\"token class-name\\">String</span> tokenKey <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">LOGIN_USER_KEY</span> <span class=\\"token operator\\">+</span> token<span class=\\"token punctuation\\">;</span>\\n        stringRedisTemplate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">opsForHash</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">putAll</span><span class=\\"token punctuation\\">(</span>tokenKey<span class=\\"token punctuation\\">,</span> userMap<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//设置有效期</span>\\n        stringRedisTemplate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">expire</span><span class=\\"token punctuation\\">(</span>tokenKey<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">LOGIN_USER_TTL</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">TimeUnit</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">MINUTES</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> token<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"全民制作人cxk","license":"CC-BY-NC-SA-4.0"},"autoDesc":true}');export{n as data};
