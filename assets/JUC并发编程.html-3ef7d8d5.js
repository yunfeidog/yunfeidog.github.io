const e=JSON.parse('{"key":"v-28509324","path":"/java/2-Java%E9%AB%98%E7%BA%A7/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.html","title":"JUC并发编程","lang":"zh-CN","frontmatter":{"title":"JUC并发编程","date":"2024-01-07T00:00:00.000Z","category":["Java","JUC并发编程"],"tag":["Java","JUC并发编程"],"description":"JUC并发编程 JUC概述 JUC是java.util.concurrent包的简称，即Java并发编程工具包，目的是为了更好地支持高并发任务，让开发者进行多线程编程时有效减少竞争条件和死锁线程。 并发编程 一些基本概念： 进程与线程： 进程：程序是静止的，进程实体的运行过程就是进程，是系统进行资源分配的基本单位 线程：线程是属于进程的，是一个基本的 CPU 执行单元，是程序执行流的最小单元。线程是进程中的一个实体，是系统独立调度的基本单位，线程本身不拥有系统资源，只拥有一点在运行中必不可少的资源，与同属一个进程的其他线程共享进程所拥有的全部资源","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/java/2-Java%E9%AB%98%E7%BA%A7/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"全民制作人ikun"}],["meta",{"property":"og:title","content":"JUC并发编程"}],["meta",{"property":"og:description","content":"JUC并发编程 JUC概述 JUC是java.util.concurrent包的简称，即Java并发编程工具包，目的是为了更好地支持高并发任务，让开发者进行多线程编程时有效减少竞争条件和死锁线程。 并发编程 一些基本概念： 进程与线程： 进程：程序是静止的，进程实体的运行过程就是进程，是系统进行资源分配的基本单位 线程：线程是属于进程的，是一个基本的 CPU 执行单元，是程序执行流的最小单元。线程是进程中的一个实体，是系统独立调度的基本单位，线程本身不拥有系统资源，只拥有一点在运行中必不可少的资源，与同属一个进程的其他线程共享进程所拥有的全部资源"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-28T07:21:55.000Z"}],["meta",{"property":"article:author","content":"全民制作人ikun"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JUC并发编程"}],["meta",{"property":"article:published_time","content":"2024-01-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-28T07:21:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JUC并发编程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-28T07:21:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全民制作人ikun\\",\\"url\\":\\"https://github.com/yunfeidog\\"}]}"]]},"headers":[{"level":2,"title":"JUC概述","slug":"juc概述","link":"#juc概述","children":[{"level":3,"title":"并发编程","slug":"并发编程","link":"#并发编程","children":[]},{"level":3,"title":"线程","slug":"线程","link":"#线程","children":[]}]},{"level":2,"title":"Lock接口","slug":"lock接口","link":"#lock接口","children":[{"level":3,"title":"synchronized关键字","slug":"synchronized关键字","link":"#synchronized关键字","children":[]}]},{"level":2,"title":"线程间通信","slug":"线程间通信","link":"#线程间通信","children":[]},{"level":2,"title":"线程间定制化通信","slug":"线程间定制化通信","link":"#线程间定制化通信","children":[]},{"level":2,"title":"集合的线程安全","slug":"集合的线程安全","link":"#集合的线程安全","children":[]},{"level":2,"title":"多线程锁","slug":"多线程锁","link":"#多线程锁","children":[{"level":3,"title":"公平锁和非公平锁","slug":"公平锁和非公平锁","link":"#公平锁和非公平锁","children":[]},{"level":3,"title":"可重入锁","slug":"可重入锁","link":"#可重入锁","children":[]},{"level":3,"title":"死锁","slug":"死锁","link":"#死锁","children":[]}]},{"level":2,"title":"Callable接口","slug":"callable接口","link":"#callable接口","children":[]},{"level":2,"title":"JUC强大的辅助类","slug":"juc强大的辅助类","link":"#juc强大的辅助类","children":[{"level":3,"title":"减少计数CountDownLatch","slug":"减少计数countdownlatch","link":"#减少计数countdownlatch","children":[]},{"level":3,"title":"信号灯Semaphore","slug":"信号灯semaphore","link":"#信号灯semaphore","children":[]}]},{"level":2,"title":"ReentrantReadWriteLock读写锁","slug":"reentrantreadwritelock读写锁","link":"#reentrantreadwritelock读写锁","children":[{"level":3,"title":"锁降级","slug":"锁降级","link":"#锁降级","children":[]}]},{"level":2,"title":"BlockingQueue阻塞队列","slug":"blockingqueue阻塞队列","link":"#blockingqueue阻塞队列","children":[]},{"level":2,"title":"ThreadPool线程池","slug":"threadpool线程池","link":"#threadpool线程池","children":[{"level":3,"title":"线程池概述","slug":"线程池概述","link":"#线程池概述","children":[]},{"level":3,"title":"线程池创建","slug":"线程池创建","link":"#线程池创建","children":[]},{"level":3,"title":"自定义线程池","slug":"自定义线程池","link":"#自定义线程池","children":[]}]},{"level":2,"title":"Fork/Join分支合并框架","slug":"fork-join分支合并框架","link":"#fork-join分支合并框架","children":[]},{"level":2,"title":"CompletableFuture异步回调","slug":"completablefuture异步回调","link":"#completablefuture异步回调","children":[]},{"level":2,"title":"并发理论JMM","slug":"并发理论jmm","link":"#并发理论jmm","children":[{"level":3,"title":"JMM内存模型","slug":"jmm内存模型","link":"#jmm内存模型","children":[]},{"level":3,"title":"重排序","slug":"重排序","link":"#重排序","children":[]},{"level":3,"title":"happens-before规则","slug":"happens-before规则","link":"#happens-before规则","children":[]}]},{"level":2,"title":"并发关键字","slug":"并发关键字","link":"#并发关键字","children":[{"level":3,"title":"synchronized","slug":"synchronized","link":"#synchronized","children":[]},{"level":3,"title":"volatile","slug":"volatile","link":"#volatile","children":[]},{"level":3,"title":"final","slug":"final","link":"#final","children":[]},{"level":3,"title":"三大特性","slug":"三大特性","link":"#三大特性","children":[]}]},{"level":2,"title":"Lock体系","slug":"lock体系","link":"#lock体系","children":[{"level":3,"title":"AQS（AbstractQueuedSynchronizer）","slug":"aqs-abstractqueuedsynchronizer","link":"#aqs-abstractqueuedsynchronizer","children":[]}]}],"git":{"createdTime":1708231378000,"updatedTime":1714288915000,"contributors":[{"name":"yunfeidog","email":"1844025705@qq.com","commits":2}]},"readingTime":{"minutes":41.53,"words":12460},"filePathRelative":"java/2-Java高级/JUC并发编程.md","localizedDate":"2024年1月7日","excerpt":"<h1> JUC并发编程</h1>\\n<h2> JUC概述</h2>\\n<p>JUC是java.util.concurrent包的简称，即Java并发编程工具包，目的是为了更好地支持高并发任务，让开发者进行多线程编程时有效减少竞争条件和死锁线程。</p>\\n<h3> 并发编程</h3>\\n<p>一些基本概念：</p>\\n<p>进程与线程：</p>\\n<ul>\\n<li>进程：程序是静止的，进程实体的运行过程就是进程，是系统进行资源分配的基本单位</li>\\n<li>线程：线程是属于进程的，是一个基本的 CPU 执行单元，是程序执行流的最小单元。线程是进程中的一个实体，是系统独立调度的基本单位，线程本身不拥有系统资源，只拥有一点在运行中必不可少的资源，与同属一个进程的其他线程共享进程所拥有的全部资源</li>\\n</ul>","copyright":{"author":"全民制作人cxk","license":"CC-BY-NC-SA-4.0"},"autoDesc":true}');export{e as data};
